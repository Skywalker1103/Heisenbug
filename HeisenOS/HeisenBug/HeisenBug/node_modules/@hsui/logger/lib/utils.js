function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/**
 * Native extend
 */
export var extend = Object.assign;

/**
 * Underscore isNumber
 */
export function isNumber(value) {
  return Object.prototype.toString.call(value) === '[object Number]';
}

/**
 * Lodash isObject
 */
export function isObject(value) {
  var type = _typeof(value);
  return value !== null && (type == 'object' || type == 'function');
}