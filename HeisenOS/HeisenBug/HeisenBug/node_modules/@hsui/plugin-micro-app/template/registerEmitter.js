// mitt-v2.0.1.es
import hCore from '@hsui/core';

function mitt(all) {
  all = all || new Map();
  return {
    on: function on(type, handler) {
      hCore.log.debug('部署事件监听', type, handler);
      var handlers = all.get(type);
      var added = handlers && handlers.push(handler);

      if (!added) {
        all.set(type, [handler]);
      }
    },
    off: function off(type, handler) {
      hCore.log.debug('取消事件监听', type, handler);
      var handlers = all.get(type);

      if (handlers) {
        if (handler) {
          handlers.splice(handlers.indexOf(handler) >>> 0, 1);
        } else {
          all.set(type, []);
        }
      }
    },
    emit: function emit(type) {
      var args = [...arguments];
      hCore.log.debug('触发事件监听', type);
      (all.get(type) || []).slice().map(function (handler) {
        hCore.log.debug('响应事件监听', type, handler);
        handler.apply(null, args.slice(1));
      });
      (all.get('*') || []).slice().map(function (handler) {
        hCore.log.debug('响应事件监听', type, handler);
        handler.apply(null, args);
      });
    }
  };
}

const { on, off, emit } = mitt();

window.__EMITTER_BY_HUI_MICRO_APP__ = { on, off, trigger: emit };

export const frameEmitter = window.__EMITTER_BY_HUI_MICRO_APP__;

export const onMicroApp = (type, handler) => frameEmitter.on.call(null, type, handler);

export const offMicroApp = (type, handler) => frameEmitter.off.call(null, type, handler);

export const triggerMicroApp = (type, data, ...args) =>
  frameEmitter.trigger.apply(null, [type, data, ...args]);
