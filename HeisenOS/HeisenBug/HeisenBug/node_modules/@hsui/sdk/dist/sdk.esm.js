import _regeneratorRuntime from '@babel/runtime/helpers/esm/regeneratorRuntime';
import _asyncToGenerator from '@babel/runtime/helpers/esm/asyncToGenerator';
import _typeof from '@babel/runtime/helpers/esm/typeof';
import _createForOfIteratorHelper from '@babel/runtime/helpers/esm/createForOfIteratorHelper';
import _objectSpread from '@babel/runtime/helpers/esm/objectSpread2';
import axios from 'axios';
import _toConsumableArray from '@babel/runtime/helpers/esm/toConsumableArray';
import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';
import _classCallCheck from '@babel/runtime/helpers/esm/classCallCheck';
import _createClass from '@babel/runtime/helpers/esm/createClass';
import _inherits from '@babel/runtime/helpers/esm/inherits';
import _createSuper from '@babel/runtime/helpers/esm/createSuper';
import SuperClassLogLevel, { createLogger as createLogger$1 } from '@hsui/logger';
import { toByteArray, fromByteArray } from 'base64-js';

var errors = {
  INVALID_KEY: 'invalid ${ key }',
  INVALID_PARAMETERS: 'invalid parameters',
  INVALID_REQUEST: 'invalid request',
  INVALID_SDK_CALL: 'invalid sdk call ${ method }',
  NOT_FOUND: '${ key } not found',
  UNKNOWN_ERROR: 'unknown error'
};
function runningError() {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'UNKNOWN_ERROR';
  var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (errors.hasOwnProperty(type)) {
    return tpl(errors[type])(payload);
  }
  return tpl(errors['UNKNOWN_ERROR'])(payload);
}
function tpl(string) {
  return function (params) {
    Object.keys(params).forEach(function (key) {
      string = string.replace('${ ' + key + ' }', params[key]);
    });
    return string;
  };
}

function isObject(value) {
  var type = _typeof(value);
  return value != null && (type == 'object' || type == 'function');
}

/**
 * Redux isPlainObject
 */
function isPlainObject(obj) {
  if (_typeof(obj) !== 'object' || obj === null) return false;
  var proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(obj) === proto;
}

function getPlatform() {
  if (isUcf()) {
    return 'ucf';
  } else {
    return 'web';
  }
}
function isUcf() {
  var pattern = /ucf/;
  if (navigator && pattern.test(navigator.userAgent.toLowerCase())) {
    // 增加跨平台的保护，避免客户端没有实现 ucf 的跨平台接口
    return window.usdk ? true : false;
  } else {
    return false;
  }
}

var isArray = Array.isArray;
function report(error_code, error_message, extra) {
  return _objectSpread({
    error_code: error_code,
    error_message: isArray(error_message) && error_message.length ? error_message[0] : error_message
  }, isPlainObject(extra) ? extra : {});
}

var ajaxSchema = {
  type: 'object',
  properties: {
    url: {
      type: 'string',
      required: true
    },
    method: {
      type: 'string',
      enum: ['get', 'post']
    },
    data: {
      type: ['string', 'number', 'object']
    },
    timeout: {
      type: 'number'
    },
    headers: {
      type: 'object'
    }
  }
};
var storageSchema = {
  type: 'object',
  properties: {
    key: {
      type: 'string',
      required: true
    },
    value: {
      type: ['string', 'number', 'object']
    },
    scope: {
      type: 'string'
    }
  }
};

// 格式化要获取的对象属性参数
function compilePointer(pointer) {
  if (typeof pointer === 'string') {
    pointer = pointer.split('/');
    if (pointer[0] === '') return pointer.slice(1);
    throw new Error('Invalid JSON pointer.');
  } else if (Array.isArray(pointer)) {
    var _iterator = _createForOfIteratorHelper(pointer),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var part = _step.value;
        if (typeof part !== 'string' && typeof part !== 'number') {
          throw new Error('Invalid JSON pointer. Must be of type string or number.');
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return pointer;
  }
  throw new Error('Invalid JSON pointer.');
}
function get(obj, pointer) {
  if (_typeof(obj) !== 'object') throw new Error('Invalid input object.');
  pointer = compilePointer(pointer);
  var len = pointer.length;
  if (len === 0) return obj;
  for (var p = 0; p < len;) {
    obj = obj[pointer[p++]];
    if (len === p) return obj;
    if (_typeof(obj) !== 'object' || obj === null) return undefined;
  }
}
var jsonpointer = {
  get: get
};

/** 根据传入的 schema 校验对象是否符合要求
 * 校验对象支持 object 类型，对象的属性支持 string number object array 类型
 * import validator from './is-json-valid';
 * const it = validator(schema); 返回一个函数
 * it(data); 传入需要校验的对象
 * it.errors;
 */

function compile(schema, opts) {
  var validate = function validate(data) {
    validate.errors = null;
    var type = schema.type;
    var errors = [];
    // 判断对象类型的参数
    if (type === 'object') {
      var dataType = _typeof(data);
      dataType === 'object' && (dataType = Array.isArray(data) ? 'array' : 'object');
      if (dataType !== 'object') {
        errors.push({
          field: 'data',
          message: 'is the wrong type',
          schemaPath: [],
          type: 'object',
          value: data
        });
      } else {
        var schemaPropertiesKeys = Object.keys(schema.properties);
        // 循环 schema 的 key
        for (var i = 0; i < schemaPropertiesKeys.length; i++) {
          var schemaItemRules = schema.properties[schemaPropertiesKeys[i]];
          var itemType = schemaItemRules.type,
            itemRequired = schemaItemRules.required,
            itemEnum = schemaItemRules.enum;

          // 如果该属性是必需项，但是未定义该属性，需要抛出错误
          if (itemRequired === true && !data.hasOwnProperty(schemaPropertiesKeys[i])) {
            errors.push({
              field: schemaPropertiesKeys[i],
              message: 'is required',
              schemaPath: ['properties', schemaPropertiesKeys[i]],
              type: itemType,
              value: undefined
            });
            continue;
          }

          // 如果属性存在判断类型是否符合
          if (itemType && data.hasOwnProperty(schemaPropertiesKeys[i])) {
            // 支持校验的数据类型 string number object array
            var dataItemType = _typeof(data[schemaPropertiesKeys[i]]);
            if (dataItemType === 'object') {
              dataItemType = Array.isArray(data[schemaPropertiesKeys[i]]) ? 'array' : 'object';
            }
            // 对于 undefined 类型数据，认为是无效值不校验
            if (dataItemType !== 'undefined' && !(itemType === dataItemType || itemType.indexOf(dataItemType) !== -1)) {
              errors.push({
                field: schemaPropertiesKeys[i],
                message: 'is the wrong type',
                schemaPath: ['properties', schemaPropertiesKeys[i]],
                type: itemType,
                value: data[schemaPropertiesKeys[i]]
              });
              continue;
            }
          }

          // 如果属性存在且规定取值范围判断值是否符合
          if (itemEnum && data.hasOwnProperty(schemaPropertiesKeys[i]) && itemEnum.indexOf(data[schemaPropertiesKeys[i]]) === -1) {
            errors.push({
              field: schemaPropertiesKeys[i],
              message: 'must be an enum value',
              schemaPath: ['properties', schemaPropertiesKeys[i]],
              type: itemType,
              value: data[schemaPropertiesKeys[i]]
            });
            continue;
          }
        }
      }
    }
    // 如果有不符合规则的情况，吧错误信息挂载函数上
    errors.length > 0 && (validate.errors = errors);
  };
  return validate;
}
function validator (schema, opts) {
  if (typeof schema === 'string') schema = JSON.parse(schema);
  return compile(schema);
}

function validate(schema, data) {
  var it = validator(schema);
  it(data);
  var errors = it.errors;
  if (errors) {
    errors = errors.map(function (_ref) {
      var field = _ref.field,
        message = _ref.message;
        _ref.value;
        var type = _ref.type,
        schemaPath = _ref.schemaPath;
      var property = field.replace('data.', '');
      if (Array.isArray(type)) {
        type = type.join();
      }
      if (message === 'is required') {
        return "".concat(property, " is required");
      }
      if (message === 'is the wrong type') {
        return "".concat(property, " is the wrong type, expect ").concat(type);
      }
      if (message === 'must be an enum value') {
        var enumvalue = jsonpointer.get(schema, schemaPath.concat('enum')).join();
        return "".concat(property, " must be one of ").concat(enumvalue);
      }
      return message;
    });
  }
  return errors;
}

function setConfig$2() {
  // 无需实现
}
function ajax$2(_x) {
  return _ajax.apply(this, arguments);
}
function _ajax() {
  _ajax = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(options) {
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return new Promise(function (resolve, reject) {
            var validationError = validate(ajaxSchema, options);
            if (validationError) {
              throw report('-1', validationError);
            }
            var url = options.url,
              _options$method = options.method,
              method = _options$method === void 0 ? 'post' : _options$method,
              _options$data = options.data,
              data = _options$data === void 0 ? {} : _options$data,
              _options$timeout = options.timeout,
              timeout = _options$timeout === void 0 ? 5000 : _options$timeout,
              _options$headers = options.headers,
              headers = _options$headers === void 0 ? {} : _options$headers;
            var requestConfig = {
              url: url,
              method: method,
              data: data,
              timeout: timeout,
              headers: headers // request headers
            };

            try {
              usdk.sendAsync(requestConfig, function (result) {
                if (result) {
                  var _JSON$parse = JSON.parse(result),
                    _data = _JSON$parse.data,
                    info = _JSON$parse.info;
                  if (info) {
                    var error_code = info.error_code,
                      error_message = info.error_message;
                    if (error_code == 0) {
                      if (_data) {
                        _data = JSON.parse(_data); // 这里需要再做一次转换

                        var _result4 = {};
                        if (options.forceWrappedInData) {
                          _result4.data = _data;
                        } else {
                          _result4 = _data;
                        }
                        if (isPlainObject(_result4)) {
                          // request config
                          if (options.includeRequestConfig) {
                            _result4.config = requestConfig;
                          }
                        }
                        resolve(_result4);
                      } else {
                        reject(report('-1', runningError('INVALID_KEY', {
                          key: 'data'
                        })));
                      }
                    } else {
                      reject(report(error_code, error_message));
                    }
                  } else {
                    reject(report('-1', runningError('INVALID_KEY', {
                      key: 'info'
                    })));
                  }
                } else {
                  reject(report('-1', runningError('INVALID_SDK_CALL', {
                    method: 'sendAsync'
                  })));
                }
              });
            } catch (error) {
              reject(report('-1', runningError('INVALID_SDK_CALL', {
                method: 'sendAsync'
              })));
            }
          });
        case 2:
          return _context4.abrupt("return", _context4.sent);
        case 3:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return _ajax.apply(this, arguments);
}
var storage$2 = {
  setData: function setData(options) {
    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return new Promise(function (resolve, reject) {
              var validationError = validate(storageSchema, options);
              if (validationError) {
                throw report('-1', validationError);
              }
              var key = options.key,
                value = options.value,
                scope = options.scope;
              try {
                usdk.writeData({
                  key: key,
                  value: value,
                  scope: scope
                }, function (result) {
                  if (result) {
                    result = JSON.parse(result);
                    var _result = result,
                      data = _result.data,
                      info = _result.info;
                    if (info) {
                      var error_code = info.error_code,
                        error_message = info.error_message;
                      if (error_code == 0) {
                        resolve();
                      } else {
                        reject(report(error_code, error_message));
                      }
                    } else {
                      reject(report('-1', runningError('INVALID_KEY', {
                        key: 'info'
                      })));
                    }
                  } else {
                    reject(report('-1', runningError('INVALID_SDK_CALL', {
                      method: 'writeData'
                    })));
                  }
                });
              } catch (error) {
                reject(report('-1', runningError('INVALID_SDK_CALL', {
                  method: 'writeData'
                })));
              }
            });
          case 2:
            return _context.abrupt("return", _context.sent);
          case 3:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }))();
  },
  getData: function getData(options) {
    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return new Promise(function (resolve, reject) {
              var validationError = validate(storageSchema, options);
              if (validationError) {
                throw report('-1', validationError);
              }
              var key = options.key,
                scope = options.scope;
              try {
                usdk.readData({
                  key: key,
                  scope: scope
                }, function (result) {
                  if (result) {
                    result = JSON.parse(result);
                    var _result2 = result,
                      data = _result2.data,
                      info = _result2.info;
                    if (info) {
                      var error_code = info.error_code,
                        error_message = info.error_message;
                      if (error_code == 0) {
                        if (data) {
                          try {
                            data = JSON.parse(data);
                          } catch (error) {
                            // may not be a json string
                          }
                          resolve(data);
                        } else {
                          reject(report('-1', runningError('INVALID_KEY', {
                            key: 'data'
                          })));
                        }
                      } else {
                        reject(report(error_code, error_message));
                      }
                    } else {
                      reject(report('-1', runningError('INVALID_KEY', {
                        key: 'info'
                      })));
                    }
                  } else {
                    reject(report('-1', runningError('INVALID_SDK_CALL', {
                      method: 'readData'
                    })));
                  }
                });
              } catch (error) {
                reject(report('-1', runningError('INVALID_SDK_CALL', {
                  method: 'readData'
                })));
              }
            });
          case 2:
            return _context2.abrupt("return", _context2.sent);
          case 3:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }))();
  },
  deleteData: function deleteData(options) {
    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return new Promise(function (resolve, reject) {
              var validationError = validate(storageSchema, options);
              if (validationError) {
                throw report('-1', validationError);
              }
              var key = options.key,
                scope = options.scope;
              try {
                usdk.deleteData({
                  key: key,
                  scope: scope
                }, function (result) {
                  if (result) {
                    result = JSON.parse(result);
                    var _result3 = result,
                      data = _result3.data,
                      info = _result3.info;
                    if (info) {
                      var error_code = info.error_code,
                        error_message = info.error_message;
                      if (error_code == 0) {
                        resolve();
                      } else {
                        reject(report(error_code, error_message));
                      }
                    } else {
                      reject(report('-1', runningError('INVALID_KEY', {
                        key: 'info'
                      })));
                    }
                  } else {
                    reject(report('-1', runningError('INVALID_SDK_CALL', {
                      method: 'deleteData'
                    })));
                  }
                });
              } catch (error) {
                reject(report('-1', runningError('INVALID_SDK_CALL', {
                  method: 'deleteData'
                })));
              }
            });
          case 2:
            return _context3.abrupt("return", _context3.sent);
          case 3:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }))();
  }
};

var ucfSdk = /*#__PURE__*/Object.freeze({
  __proto__: null,
  setConfig: setConfig$2,
  ajax: ajax$2,
  storage: storage$2
});

var logger;

/**
 * ajaxPromise(调用ajax函数得到)和cancel函数（取消请求函数）关系对应
 * 其中，key 为 ajaxPromise ，value 为 cancel 函数
 */
var ajaxCancelMap$1 = new WeakMap();
function setConfig$1(opts) {
  logger = opts.logger;
}
function ajax$1(options) {
  var cancel; // 存储当前请求取消函数

  var ajaxPromise = new Promise(function (resolve, reject) {
    var validationError = validate(ajaxSchema, options);
    if (validationError) {
      throw report('-1', validationError);
    }
    var url = options.url,
      _options$method = options.method,
      method = _options$method === void 0 ? 'post' : _options$method,
      _options$data = options.data,
      data = _options$data === void 0 ? {} : _options$data,
      _options$timeout = options.timeout,
      timeout = _options$timeout === void 0 ? 5000 : _options$timeout,
      _options$headers = options.headers,
      headers = _options$headers === void 0 ? {} : _options$headers,
      _options$withCredenti = options.withCredentials,
      withCredentials = _options$withCredenti === void 0 ? false : _options$withCredenti,
      _options$responseType = options.responseType,
      responseType = _options$responseType === void 0 ? 'json' : _options$responseType;
    var requestConfig = {
      url: url,
      method: method,
      params: method === 'get' ? data : {},
      data: method === 'post' ? data : {},
      timeout: timeout,
      headers: headers,
      // request headers
      withCredentials: withCredentials,
      responseType: responseType,
      cancelToken: new axios.CancelToken(function (c) {
        cancel = c;
      })
    };
    logger && logger.debug("\u53D1\u9001\u8BF7\u6C42 ".concat(requestConfig.url, " \u914D\u7F6E\u9879"), requestConfig);
    axios(requestConfig).then(function (response) {
      var data = response.data,
        headers = response.headers,
        status = response.status,
        statusText = response.statusText;
      logger && logger.debug("\u8BF7\u6C42 ".concat(requestConfig.url, " \u5E94\u7B54\u5934\u90E8\u5B57\u6BB5"), headers);
      var result = {};
      if (options.forceWrappedInData) {
        result.data = data;
      } else {
        result = data;
      }
      if (isPlainObject(result)) {
        // request config
        if (options.includeRequestConfig) {
          result.config = requestConfig;
        }

        // response headers
        if (options.includeResponseHeaders) {
          result.headers = headers;
        }
        if (options.includeResponseStatusInfo) {
          result.status = status;
          result.statusText = statusText;
        }
      }
      resolve(result);
    }).catch(function (error) {
      if (axios.isCancel(error)) {
        logger && logger.info("".concat(requestConfig.url, " \u53D6\u6D88\u8BF7\u6C42"));
        reject(report('-1', "".concat(requestConfig.url, " \u53D6\u6D88\u8BF7\u6C42 ")));
        return;
      }
      logger && logger.error("\u8BF7\u6C42 ".concat(requestConfig.url, " \u5F02\u5E38"));
      if (error.response) {
        // The request was made and the server responded with a status code
        // that falls out of the range of 2xx
        var _error$response = error.response,
          status = _error$response.status,
          statusText = _error$response.statusText,
          _data = _error$response.data,
          _headers = _error$response.headers;
        logger && logger.error("\u8BF7\u6C42 ".concat(requestConfig.url, " \u5E94\u7B54\u5934\u90E8\u5B57\u6BB5"), _headers);
        var result = {};
        if (options.forceWrappedInData) {
          result.data = _data;
        } else {
          result = _data;
        }
        if (isPlainObject(result)) {
          // request config
          if (options.includeRequestConfig) {
            result.config = requestConfig;
          }

          // response headers
          if (options.includeResponseHeaders) {
            result.headers = _headers;
          }
          if (options.includeResponseStatusInfo) {
            result.status = status;
            result.statusText = statusText;
          }
        }
        return reject(report(status, statusText, result));
      } else if (error.request) {
        // The request was made but no response was received
        // `error.request` is an instance of XMLHttpRequest in the browser and an instance of
        // http.ClientRequest in node.js
        logger && logger.error(runningError('INVALID_REQUEST'));
        reject(report('-1', runningError('INVALID_REQUEST')));
      } else {
        // Something happened in setting up the request that triggered an Error
        logger && logger.error(error.message);
        reject(report('-1', error.message));
      }
    });
  });

  // 建立关联，ajaxPromise 和 cancel 函数
  ajaxCancelMap$1.set(ajaxPromise, cancel);
  return ajaxPromise;
}
var storage$1 = {
  setData: function setData(options) {
    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var validationError, key, value;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            validationError = validate(storageSchema, options);
            if (!validationError) {
              _context.next = 4;
              break;
            }
            logger && logger.error('本地数据写入异常', validationError);
            throw report('-1', validationError);
          case 4:
            key = options.key, value = options.value;
            if (isObject(value)) {
              value = JSON.stringify(value);
            }
            value = value.toString();
            _context.prev = 7;
            logger && logger.debug('本地数据写入成功', key);
            return _context.abrupt("return", localStorage.setItem(key, value));
          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](7);
            logger && logger.error('本地数据写入异常', 'fail to set local data, value could exceed the quota');
            throw report('-1', 'fail to set local data, value could exceed the quota');
          case 16:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[7, 12]]);
    }))();
  },
  getData: function getData(options) {
    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var validationError, key, value;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            validationError = validate(storageSchema, options);
            if (!validationError) {
              _context2.next = 4;
              break;
            }
            logger && logger.debug('本地数据读取异常', validationError);
            throw report('-1', validationError);
          case 4:
            key = options.key;
            if (!localStorage.hasOwnProperty(key)) {
              _context2.next = 11;
              break;
            }
            value = localStorage.getItem(key);
            logger && logger.debug('读取本地数据成功', key);
            return _context2.abrupt("return", value);
          case 11:
            logger && logger.debug('本地数据读取异常', runningError('NOT_FOUND', {
              key: key
            }));
            throw report('-1', runningError('NOT_FOUND', {
              key: key
            }));
          case 13:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }))();
  },
  deleteData: function deleteData(options) {
    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var validationError, key;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            validationError = validate(storageSchema, options);
            if (!validationError) {
              _context3.next = 4;
              break;
            }
            logger && logger.error('本地数据删除异常', validationError);
            throw report('-1', validationError);
          case 4:
            key = options.key;
            if (!localStorage.hasOwnProperty(key)) {
              _context3.next = 10;
              break;
            }
            logger && logger.debug('删除本地数据成功', key);
            return _context3.abrupt("return", localStorage.removeItem(key));
          case 10:
            logger && logger.error('本地数据删除异常', runningError('NOT_FOUND', {
              key: key
            }));
            throw report('-1', runningError('NOT_FOUND', {
              key: key
            }));
          case 12:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }))();
  }
};

var webSdk = /*#__PURE__*/Object.freeze({
  __proto__: null,
  ajaxCancelMap: ajaxCancelMap$1,
  setConfig: setConfig$1,
  ajax: ajax$1,
  storage: storage$1
});

var city_code = [110000, 110100, 110101, 110102, 110105, 110106, 110107, 110108, 110109, 110111, 110112, 110113, 110114, 110115, 110116, 110117, 110200, 110228, 110229, 120000, 120100, 120101, 120102, 120103, 120104, 120105, 120106, 120110, 120111, 120112, 120113, 120114, 120115, 120116, 120117, 120118, 120200, 120225, 130000, 130100, 130101, 130102, 130104, 130105, 130107, 130108, 130109, 130110, 130111, 130121, 130123, 130125, 130126, 130127, 130128, 130129, 130130, 130131, 130132, 130133, 130183, 130184, 130200, 130201, 130202, 130203, 130204, 130205, 130207, 130208, 130209, 130223, 130224, 130225, 130227, 130229, 130281, 130283, 130300, 130301, 130302, 130303, 130304, 130306, 130321, 130322, 130324, 130400, 130401, 130402, 130403, 130404, 130406, 130421, 130423, 130424, 130425, 130426, 130427, 130428, 130429, 130430, 130431, 130432, 130433, 130434, 130435, 130481, 130500, 130501, 130502, 130503, 130521, 130522, 130523, 130524, 130525, 130526, 130527, 130528, 130529, 130530, 130531, 130532, 130533, 130534, 130535, 130581, 130582, 130600, 130601, 130602, 130606, 130607, 130608, 130609, 130623, 130624, 130626, 130627, 130628, 130629, 130630, 130631, 130632, 130633, 130634, 130635, 130636, 130637, 130638, 130681, 130683, 130684, 130700, 130701, 130702, 130703, 130705, 130706, 130721, 130722, 130723, 130724, 130725, 130726, 130727, 130728, 130729, 130730, 130731, 130732, 130733, 130800, 130801, 130802, 130803, 130804, 130821, 130822, 130823, 130824, 130825, 130826, 130827, 130828, 130900, 130901, 130902, 130903, 130921, 130922, 130923, 130924, 130925, 130926, 130927, 130928, 130929, 130930, 130981, 130982, 130983, 130984, 131000, 131001, 131002, 131003, 131022, 131023, 131024, 131025, 131026, 131028, 131081, 131082, 131100, 131101, 131102, 131121, 131122, 131123, 131124, 131125, 131126, 131127, 131128, 131181, 131182, 139000, 139001, 139002, 140000, 140100, 140101, 140105, 140106, 140107, 140108, 140109, 140110, 140121, 140122, 140123, 140181, 140200, 140201, 140202, 140203, 140211, 140212, 140221, 140222, 140223, 140224, 140225, 140226, 140227, 140300, 140301, 140302, 140303, 140311, 140321, 140322, 140400, 140401, 140402, 140411, 140421, 140423, 140424, 140425, 140426, 140427, 140428, 140429, 140430, 140431, 140481, 140500, 140501, 140502, 140521, 140522, 140524, 140525, 140581, 140600, 140601, 140602, 140603, 140621, 140622, 140623, 140624, 140700, 140701, 140702, 140721, 140722, 140723, 140724, 140725, 140726, 140727, 140728, 140729, 140781, 140800, 140801, 140802, 140821, 140822, 140823, 140824, 140825, 140826, 140827, 140828, 140829, 140830, 140881, 140882, 140900, 140901, 140902, 140921, 140922, 140923, 140924, 140925, 140926, 140927, 140928, 140929, 140930, 140931, 140932, 140981, 141000, 141001, 141002, 141021, 141022, 141023, 141024, 141025, 141026, 141027, 141028, 141029, 141030, 141031, 141032, 141033, 141034, 141081, 141082, 141100, 141101, 141102, 141121, 141122, 141123, 141124, 141125, 141126, 141127, 141128, 141129, 141130, 141181, 141182, 150000, 150100, 150101, 150102, 150103, 150104, 150105, 150121, 150122, 150123, 150124, 150125, 150200, 150201, 150202, 150203, 150204, 150205, 150206, 150207, 150221, 150222, 150223, 150300, 150301, 150302, 150303, 150304, 150400, 150401, 150402, 150403, 150404, 150421, 150422, 150423, 150424, 150425, 150426, 150428, 150429, 150430, 150500, 150501, 150502, 150521, 150522, 150523, 150524, 150525, 150526, 150581, 150600, 150601, 150602, 150621, 150622, 150623, 150624, 150625, 150626, 150627, 150700, 150701, 150702, 150703, 150721, 150722, 150723, 150724, 150725, 150726, 150727, 150781, 150782, 150783, 150784, 150785, 150800, 150801, 150802, 150821, 150822, 150823, 150824, 150825, 150826, 150900, 150901, 150902, 150921, 150922, 150923, 150924, 150925, 150926, 150927, 150928, 150929, 150981, 152200, 152201, 152202, 152221, 152222, 152223, 152224, 152500, 152501, 152502, 152522, 152523, 152524, 152525, 152526, 152527, 152528, 152529, 152530, 152531, 152900, 152921, 152922, 152923, 210000, 210100, 210101, 210102, 210103, 210104, 210105, 210106, 210111, 210112, 210113, 210114, 210122, 210123, 210124, 210181, 210200, 210201, 210202, 210203, 210204, 210211, 210212, 210213, 210224, 210281, 210282, 210283, 210300, 210301, 210302, 210303, 210304, 210311, 210321, 210323, 210381, 210400, 210401, 210402, 210403, 210404, 210411, 210421, 210422, 210423, 210500, 210501, 210502, 210503, 210504, 210505, 210521, 210522, 210600, 210601, 210602, 210603, 210604, 210624, 210681, 210682, 210700, 210701, 210702, 210703, 210711, 210726, 210727, 210781, 210782, 210800, 210801, 210802, 210803, 210804, 210811, 210881, 210882, 210900, 210901, 210902, 210903, 210904, 210905, 210911, 210921, 210922, 211000, 211001, 211002, 211003, 211004, 211005, 211011, 211021, 211081, 211100, 211101, 211102, 211103, 211121, 211122, 211200, 211201, 211202, 211204, 211221, 211223, 211224, 211281, 211282, 211300, 211301, 211302, 211303, 211321, 211322, 211324, 211381, 211382, 211400, 211401, 211402, 211403, 211404, 211421, 211422, 211481, 220000, 220100, 220101, 220102, 220103, 220104, 220105, 220106, 220112, 220113, 220122, 220182, 220183, 220200, 220201, 220202, 220203, 220204, 220211, 220221, 220281, 220282, 220283, 220284, 220300, 220301, 220302, 220303, 220322, 220323, 220381, 220382, 220400, 220401, 220402, 220403, 220421, 220422, 220500, 220501, 220502, 220503, 220521, 220523, 220524, 220581, 220582, 220600, 220601, 220602, 220605, 220621, 220622, 220623, 220681, 220700, 220701, 220702, 220721, 220722, 220723, 220781, 220800, 220801, 220802, 220821, 220822, 220881, 220882, 222400, 222401, 222402, 222403, 222404, 222405, 222406, 222424, 222426, 230000, 230100, 230101, 230102, 230103, 230104, 230108, 230109, 230110, 230111, 230112, 230113, 230123, 230124, 230125, 230126, 230127, 230128, 230129, 230183, 230184, 230200, 230201, 230202, 230203, 230204, 230205, 230206, 230207, 230208, 230221, 230223, 230224, 230225, 230227, 230229, 230230, 230231, 230281, 230300, 230301, 230302, 230303, 230304, 230305, 230306, 230307, 230321, 230381, 230382, 230400, 230401, 230402, 230403, 230404, 230405, 230406, 230407, 230421, 230422, 230500, 230501, 230502, 230503, 230505, 230506, 230521, 230522, 230523, 230524, 230600, 230601, 230602, 230603, 230604, 230605, 230606, 230621, 230622, 230623, 230624, 230700, 230701, 230702, 230703, 230704, 230705, 230706, 230707, 230708, 230709, 230710, 230711, 230712, 230713, 230714, 230715, 230716, 230722, 230781, 230800, 230801, 230803, 230804, 230805, 230811, 230822, 230826, 230828, 230833, 230881, 230882, 230900, 230901, 230902, 230903, 230904, 230921, 231000, 231001, 231002, 231003, 231004, 231005, 231024, 231025, 231081, 231083, 231084, 231085, 231100, 231101, 231102, 231121, 231123, 231124, 231181, 231182, 231200, 231201, 231202, 231221, 231222, 231223, 231224, 231225, 231226, 231281, 231282, 231283, 232700, 232721, 232722, 232723, 310000, 310100, 310101, 310104, 310105, 310106, 310107, 310108, 310109, 310110, 310112, 310113, 310114, 310115, 310116, 310117, 310118, 310120, 310200, 310230, 320000, 320100, 320101, 320102, 320104, 320105, 320106, 320111, 320113, 320114, 320115, 320116, 320117, 320118, 320200, 320201, 320202, 320203, 320204, 320205, 320206, 320211, 320281, 320282, 320300, 320301, 320302, 320303, 320305, 320311, 320312, 320321, 320322, 320324, 320381, 320382, 320400, 320401, 320402, 320404, 320411, 320412, 320413, 320481, 320500, 320501, 320505, 320506, 320507, 320508, 320509, 320581, 320582, 320583, 320585, 320600, 320601, 320602, 320611, 320612, 320621, 320623, 320681, 320682, 320684, 320700, 320701, 320703, 320706, 320707, 320722, 320723, 320724, 320800, 320801, 320802, 320803, 320804, 320811, 320826, 320829, 320830, 320831, 320900, 320901, 320902, 320903, 320904, 320921, 320922, 320923, 320924, 320925, 320981, 321000, 321001, 321002, 321003, 321012, 321023, 321081, 321084, 321100, 321101, 321102, 321111, 321112, 321181, 321182, 321183, 321200, 321201, 321202, 321203, 321204, 321281, 321282, 321283, 321300, 321301, 321302, 321311, 321322, 321323, 321324, 330000, 330100, 330101, 330102, 330103, 330104, 330105, 330106, 330108, 330109, 330110, 330111, 330122, 330127, 330182, 330185, 330200, 330201, 330203, 330204, 330205, 330206, 330211, 330212, 330225, 330226, 330281, 330282, 330283, 330300, 330301, 330302, 330303, 330304, 330305, 330324, 330326, 330327, 330328, 330329, 330381, 330382, 330400, 330401, 330402, 330411, 330421, 330424, 330481, 330482, 330483, 330500, 330501, 330502, 330503, 330521, 330522, 330523, 330600, 330601, 330602, 330603, 330604, 330624, 330681, 330683, 330700, 330701, 330702, 330703, 330723, 330726, 330727, 330781, 330782, 330783, 330784, 330800, 330801, 330802, 330803, 330822, 330824, 330825, 330881, 330900, 330901, 330902, 330903, 330921, 330922, 331000, 331001, 331002, 331003, 331004, 331021, 331022, 331023, 331024, 331081, 331082, 331100, 331101, 331102, 331121, 331122, 331123, 331124, 331125, 331126, 331127, 331181, 340000, 340100, 340101, 340102, 340103, 340104, 340111, 340121, 340122, 340123, 340124, 340181, 340200, 340201, 340202, 340203, 340207, 340208, 340221, 340222, 340223, 340225, 340300, 340301, 340302, 340303, 340304, 340311, 340321, 340322, 340323, 340400, 340401, 340402, 340403, 340404, 340405, 340406, 340421, 340500, 340501, 340503, 340504, 340506, 340521, 340522, 340523, 340600, 340601, 340602, 340603, 340604, 340621, 340700, 340701, 340702, 340703, 340711, 340721, 340800, 340801, 340802, 340803, 340811, 340822, 340823, 340824, 340825, 340826, 340827, 340828, 340881, 341000, 341001, 341002, 341003, 341004, 341021, 341022, 341023, 341024, 341100, 341101, 341102, 341103, 341122, 341124, 341125, 341126, 341181, 341182, 341200, 341201, 341202, 341203, 341204, 341221, 341222, 341225, 341226, 341282, 341300, 341301, 341302, 341321, 341322, 341323, 341324, 341500, 341501, 341502, 341503, 341521, 341522, 341523, 341524, 341525, 341600, 341601, 341602, 341621, 341622, 341623, 341700, 341701, 341702, 341721, 341722, 341723, 341800, 341801, 341802, 341821, 341822, 341823, 341824, 341825, 341881, 350000, 350100, 350101, 350102, 350103, 350104, 350105, 350111, 350121, 350122, 350123, 350124, 350125, 350128, 350181, 350182, 350200, 350201, 350203, 350205, 350206, 350211, 350212, 350213, 350300, 350301, 350302, 350303, 350304, 350305, 350322, 350400, 350401, 350402, 350403, 350421, 350423, 350424, 350425, 350426, 350427, 350428, 350429, 350430, 350481, 350500, 350501, 350502, 350503, 350504, 350505, 350521, 350524, 350525, 350526, 350527, 350581, 350582, 350583, 350600, 350601, 350602, 350603, 350622, 350623, 350624, 350625, 350626, 350627, 350628, 350629, 350681, 350700, 350701, 350702, 350703, 350721, 350722, 350723, 350724, 350725, 350781, 350782, 350783, 350800, 350801, 350802, 350803, 350821, 350823, 350824, 350825, 350881, 350900, 350901, 350902, 350921, 350922, 350923, 350924, 350925, 350926, 350981, 350982, 360000, 360100, 360101, 360102, 360103, 360104, 360105, 360111, 360112, 360121, 360123, 360124, 360200, 360201, 360202, 360203, 360222, 360281, 360300, 360301, 360302, 360313, 360321, 360322, 360323, 360400, 360401, 360402, 360403, 360421, 360423, 360424, 360425, 360426, 360427, 360428, 360429, 360430, 360481, 360482, 360500, 360501, 360502, 360521, 360600, 360601, 360602, 360622, 360681, 360700, 360701, 360702, 360703, 360721, 360722, 360723, 360724, 360725, 360726, 360727, 360728, 360729, 360730, 360731, 360732, 360733, 360734, 360735, 360781, 360800, 360801, 360802, 360803, 360821, 360822, 360823, 360824, 360825, 360826, 360827, 360828, 360829, 360830, 360881, 360900, 360901, 360902, 360921, 360922, 360923, 360924, 360925, 360926, 360981, 360982, 360983, 361000, 361001, 361002, 361021, 361022, 361023, 361024, 361025, 361026, 361027, 361028, 361029, 361030, 361100, 361101, 361102, 361103, 361121, 361123, 361124, 361125, 361126, 361127, 361128, 361129, 361130, 361181, 370000, 370100, 370101, 370102, 370103, 370104, 370105, 370112, 370113, 370124, 370125, 370126, 370181, 370200, 370201, 370202, 370203, 370211, 370212, 370213, 370214, 370281, 370282, 370283, 370285, 370300, 370301, 370302, 370303, 370304, 370305, 370306, 370321, 370322, 370323, 370400, 370401, 370402, 370403, 370404, 370405, 370406, 370481, 370500, 370501, 370502, 370503, 370521, 370522, 370523, 370600, 370601, 370602, 370611, 370612, 370613, 370634, 370681, 370682, 370683, 370684, 370685, 370686, 370687, 370700, 370701, 370702, 370703, 370704, 370705, 370724, 370725, 370781, 370782, 370783, 370784, 370785, 370786, 370800, 370801, 370811, 370812, 370826, 370827, 370828, 370829, 370830, 370831, 370832, 370881, 370883, 370900, 370901, 370902, 370911, 370921, 370923, 370982, 370983, 371000, 371001, 371002, 371003, 371082, 371083, 371100, 371101, 371102, 371103, 371121, 371122, 371200, 371201, 371202, 371203, 371300, 371301, 371302, 371311, 371312, 371321, 371322, 371323, 371324, 371325, 371326, 371327, 371328, 371329, 371400, 371401, 371402, 371403, 371422, 371423, 371424, 371425, 371426, 371427, 371428, 371481, 371482, 371500, 371501, 371502, 371521, 371522, 371523, 371524, 371525, 371526, 371581, 371600, 371601, 371602, 371603, 371621, 371622, 371623, 371625, 371626, 371700, 371701, 371702, 371721, 371722, 371723, 371724, 371725, 371726, 371727, 371728, 410000, 410100, 410101, 410102, 410103, 410104, 410105, 410106, 410108, 410122, 410181, 410182, 410183, 410184, 410185, 410200, 410201, 410202, 410203, 410204, 410205, 410211, 410212, 410221, 410222, 410223, 410225, 410300, 410301, 410302, 410303, 410304, 410305, 410306, 410311, 410322, 410323, 410324, 410325, 410326, 410327, 410328, 410329, 410381, 410400, 410401, 410402, 410403, 410404, 410411, 410421, 410422, 410423, 410425, 410481, 410482, 410500, 410501, 410502, 410503, 410505, 410506, 410522, 410523, 410526, 410527, 410581, 410600, 410601, 410602, 410603, 410611, 410621, 410622, 410700, 410701, 410702, 410703, 410704, 410711, 410721, 410724, 410725, 410726, 410727, 410728, 410781, 410782, 410800, 410801, 410802, 410803, 410804, 410811, 410821, 410822, 410823, 410825, 410882, 410883, 410900, 410901, 410902, 410922, 410923, 410926, 410927, 410928, 411000, 411001, 411002, 411023, 411024, 411025, 411081, 411082, 411100, 411101, 411102, 411103, 411104, 411121, 411122, 411200, 411201, 411202, 411221, 411222, 411224, 411281, 411282, 411300, 411301, 411302, 411303, 411321, 411322, 411323, 411324, 411325, 411326, 411327, 411328, 411329, 411330, 411381, 411400, 411401, 411402, 411403, 411421, 411422, 411423, 411424, 411425, 411426, 411481, 411500, 411501, 411502, 411503, 411521, 411522, 411523, 411524, 411525, 411526, 411527, 411528, 411600, 411601, 411602, 411621, 411622, 411623, 411624, 411625, 411626, 411627, 411628, 411681, 411700, 411701, 411702, 411721, 411722, 411723, 411724, 411725, 411726, 411727, 411728, 411729, 419000, 419001, 420000, 420100, 420101, 420102, 420103, 420104, 420105, 420106, 420107, 420111, 420112, 420113, 420114, 420115, 420116, 420117, 420200, 420201, 420202, 420203, 420204, 420205, 420222, 420281, 420300, 420301, 420302, 420303, 420304, 420322, 420323, 420324, 420325, 420381, 420500, 420501, 420502, 420503, 420504, 420505, 420506, 420525, 420526, 420527, 420528, 420529, 420581, 420582, 420583, 420600, 420601, 420602, 420606, 420607, 420624, 420625, 420626, 420682, 420683, 420684, 420700, 420701, 420702, 420703, 420704, 420800, 420801, 420802, 420804, 420821, 420822, 420881, 420900, 420901, 420902, 420921, 420922, 420923, 420981, 420982, 420984, 421000, 421001, 421002, 421003, 421022, 421023, 421024, 421081, 421083, 421087, 421100, 421101, 421102, 421121, 421122, 421123, 421124, 421125, 421126, 421127, 421181, 421182, 421200, 421201, 421202, 421221, 421222, 421223, 421224, 421281, 421300, 421301, 421303, 421321, 421381, 422800, 422801, 422802, 422822, 422823, 422825, 422826, 422827, 422828, 429000, 429004, 429005, 429006, 429021, 430000, 430100, 430101, 430102, 430103, 430104, 430105, 430111, 430112, 430121, 430124, 430181, 430200, 430201, 430202, 430203, 430204, 430211, 430221, 430223, 430224, 430225, 430281, 430300, 430301, 430302, 430304, 430321, 430381, 430382, 430400, 430401, 430405, 430406, 430407, 430408, 430412, 430421, 430422, 430423, 430424, 430426, 430481, 430482, 430500, 430501, 430502, 430503, 430511, 430521, 430522, 430523, 430524, 430525, 430527, 430528, 430529, 430581, 430600, 430601, 430602, 430603, 430611, 430621, 430623, 430624, 430626, 430681, 430682, 430700, 430701, 430702, 430703, 430721, 430722, 430723, 430724, 430725, 430726, 430781, 430800, 430801, 430802, 430811, 430821, 430822, 430900, 430901, 430902, 430903, 430921, 430922, 430923, 430981, 431000, 431001, 431002, 431003, 431021, 431022, 431023, 431024, 431025, 431026, 431027, 431028, 431081, 431100, 431101, 431102, 431103, 431121, 431122, 431123, 431124, 431125, 431126, 431127, 431128, 431129, 431200, 431201, 431202, 431221, 431222, 431223, 431224, 431225, 431226, 431227, 431228, 431229, 431230, 431281, 431300, 431301, 431302, 431321, 431322, 431381, 431382, 433100, 433101, 433122, 433123, 433124, 433125, 433126, 433127, 433130, 440000, 440100, 440101, 440103, 440104, 440105, 440106, 440111, 440112, 440113, 440114, 440115, 440117, 440118, 440200, 440201, 440203, 440204, 440205, 440222, 440224, 440229, 440232, 440233, 440281, 440282, 440300, 440301, 440303, 440304, 440305, 440306, 440307, 440308, 440400, 440401, 440402, 440403, 440404, 440500, 440501, 440507, 440511, 440512, 440513, 440514, 440515, 440523, 440600, 440601, 440604, 440605, 440606, 440607, 440608, 440700, 440701, 440703, 440704, 440705, 440781, 440783, 440784, 440785, 440800, 440801, 440802, 440803, 440804, 440811, 440823, 440825, 440881, 440882, 440883, 440900, 440901, 440902, 440904, 440981, 440982, 440983, 441200, 441201, 441202, 441203, 441204, 441223, 441224, 441225, 441226, 441284, 441300, 441301, 441302, 441303, 441322, 441323, 441324, 441400, 441401, 441402, 441403, 441422, 441423, 441424, 441426, 441427, 441481, 441500, 441501, 441502, 441521, 441523, 441581, 441600, 441601, 441602, 441621, 441622, 441623, 441624, 441625, 441700, 441701, 441702, 441704, 441721, 441781, 441800, 441801, 441802, 441803, 441821, 441823, 441825, 441826, 441881, 441882, 441900, 442000, 445100, 445101, 445102, 445103, 445122, 445200, 445201, 445202, 445203, 445222, 445224, 445281, 445300, 445301, 445302, 445303, 445321, 445322, 445381, 450000, 450100, 450101, 450102, 450103, 450105, 450107, 450108, 450109, 450110, 450123, 450124, 450125, 450126, 450127, 450200, 450201, 450202, 450203, 450204, 450205, 450221, 450222, 450223, 450224, 450225, 450226, 450300, 450301, 450302, 450303, 450304, 450305, 450311, 450312, 450321, 450323, 450324, 450325, 450326, 450327, 450328, 450329, 450330, 450331, 450332, 450400, 450401, 450403, 450405, 450406, 450421, 450422, 450423, 450481, 450500, 450501, 450502, 450503, 450512, 450521, 450600, 450601, 450602, 450603, 450621, 450681, 450700, 450701, 450702, 450703, 450721, 450722, 450800, 450801, 450802, 450803, 450804, 450821, 450881, 450900, 450901, 450902, 450903, 450921, 450922, 450923, 450924, 450981, 451000, 451001, 451002, 451021, 451022, 451023, 451024, 451026, 451027, 451028, 451029, 451030, 451031, 451081, 451100, 451101, 451102, 451121, 451122, 451123, 451200, 451201, 451202, 451221, 451222, 451223, 451224, 451225, 451226, 451227, 451228, 451229, 451281, 451300, 451301, 451302, 451321, 451322, 451323, 451324, 451381, 451400, 451401, 451402, 451421, 451422, 451423, 451424, 451425, 451481, 460000, 460100, 460101, 460105, 460106, 460107, 460108, 460200, 460201, 460202, 460203, 460204, 460205, 460300, 460321, 460322, 460323, 469000, 469001, 469002, 469003, 469005, 469006, 469007, 469021, 469022, 469023, 469024, 469025, 469026, 469027, 469028, 469029, 469030, 500000, 500100, 500101, 500102, 500103, 500104, 500105, 500106, 500107, 500108, 500109, 500110, 500111, 500112, 500113, 500114, 500115, 500116, 500117, 500118, 500119, 500120, 500151, 500152, 500153, 500200, 500228, 500229, 500230, 500231, 500232, 500233, 500234, 500235, 500236, 500237, 500238, 500240, 500241, 500242, 500243, 510000, 510100, 510101, 510104, 510105, 510106, 510107, 510108, 510112, 510113, 510114, 510115, 510121, 510122, 510124, 510129, 510131, 510132, 510181, 510182, 510183, 510184, 510300, 510301, 510302, 510303, 510304, 510311, 510321, 510322, 510400, 510401, 510402, 510403, 510411, 510421, 510422, 510500, 510501, 510502, 510503, 510504, 510521, 510522, 510524, 510525, 510600, 510601, 510603, 510623, 510626, 510681, 510682, 510683, 510700, 510701, 510703, 510704, 510722, 510723, 510724, 510725, 510726, 510727, 510781, 510800, 510801, 510802, 510811, 510812, 510821, 510822, 510823, 510824, 510900, 510901, 510903, 510904, 510921, 510922, 510923, 511000, 511001, 511002, 511011, 511024, 511025, 511028, 511100, 511101, 511102, 511111, 511112, 511113, 511123, 511124, 511126, 511129, 511132, 511133, 511181, 511300, 511301, 511302, 511303, 511304, 511321, 511322, 511323, 511324, 511325, 511381, 511400, 511401, 511402, 511403, 511421, 511423, 511424, 511425, 511500, 511501, 511502, 511503, 511521, 511523, 511524, 511525, 511526, 511527, 511528, 511529, 511600, 511601, 511602, 511603, 511621, 511622, 511623, 511681, 511700, 511701, 511702, 511703, 511722, 511723, 511724, 511725, 511781, 511800, 511801, 511802, 511803, 511822, 511823, 511824, 511825, 511826, 511827, 511900, 511901, 511902, 511903, 511921, 511922, 511923, 512000, 512001, 512002, 512021, 512022, 512081, 513200, 513221, 513222, 513223, 513224, 513225, 513226, 513227, 513228, 513229, 513230, 513231, 513232, 513233, 513300, 513301, 513322, 513323, 513324, 513325, 513326, 513327, 513328, 513329, 513330, 513331, 513332, 513333, 513334, 513335, 513336, 513337, 513338, 513400, 513401, 513422, 513423, 513424, 513425, 513426, 513427, 513428, 513429, 513430, 513431, 513432, 513433, 513434, 513435, 513436, 513437, 520000, 520100, 520101, 520102, 520103, 520111, 520112, 520113, 520115, 520121, 520122, 520123, 520181, 520200, 520201, 520203, 520221, 520222, 520300, 520301, 520302, 520303, 520321, 520322, 520323, 520324, 520325, 520326, 520327, 520328, 520329, 520330, 520381, 520382, 520400, 520401, 520402, 520403, 520422, 520423, 520424, 520425, 520500, 520501, 520502, 520521, 520522, 520523, 520524, 520525, 520526, 520527, 520600, 520601, 520602, 520603, 520621, 520622, 520623, 520624, 520625, 520626, 520627, 520628, 522300, 522301, 522322, 522323, 522324, 522325, 522326, 522327, 522328, 522600, 522601, 522622, 522623, 522624, 522625, 522626, 522627, 522628, 522629, 522630, 522631, 522632, 522633, 522634, 522635, 522636, 522700, 522701, 522702, 522722, 522723, 522725, 522726, 522727, 522728, 522729, 522730, 522731, 522732, 530000, 530100, 530101, 530102, 530103, 530111, 530112, 530113, 530114, 530122, 530124, 530125, 530126, 530127, 530128, 530129, 530181, 530300, 530301, 530302, 530321, 530322, 530323, 530324, 530325, 530326, 530328, 530381, 530400, 530401, 530402, 530421, 530422, 530423, 530424, 530425, 530426, 530427, 530428, 530500, 530501, 530502, 530521, 530523, 530524, 530581, 530600, 530601, 530602, 530621, 530622, 530623, 530624, 530625, 530626, 530627, 530628, 530629, 530630, 530700, 530701, 530702, 530721, 530722, 530723, 530724, 530800, 530801, 530802, 530821, 530822, 530823, 530824, 530825, 530826, 530827, 530828, 530829, 530900, 530901, 530902, 530921, 530922, 530923, 530924, 530925, 530926, 530927, 532300, 532301, 532322, 532323, 532324, 532325, 532326, 532327, 532328, 532329, 532331, 532500, 532501, 532502, 532503, 532504, 532523, 532524, 532525, 532527, 532528, 532529, 532530, 532531, 532532, 532600, 532601, 532622, 532623, 532624, 532625, 532626, 532627, 532628, 532800, 532801, 532822, 532823, 532900, 532901, 532922, 532923, 532924, 532925, 532926, 532927, 532928, 532929, 532930, 532931, 532932, 533100, 533102, 533103, 533122, 533123, 533124, 533300, 533321, 533323, 533324, 533325, 533400, 533401, 533422, 533423, 540000, 540100, 540101, 540102, 540121, 540122, 540123, 540124, 540125, 540126, 540127, 540200, 540202, 540221, 540222, 540223, 540224, 540225, 540226, 540227, 540228, 540229, 540230, 540231, 540232, 540233, 540234, 540235, 540236, 540237, 540300, 540302, 540321, 540322, 540323, 540324, 540325, 540326, 540327, 540328, 540329, 540330, 540400, 540402, 540421, 540422, 540423, 540424, 540425, 540426, 542200, 542221, 542222, 542223, 542224, 542225, 542226, 542227, 542228, 542229, 542231, 542232, 542233, 542400, 542421, 542422, 542423, 542424, 542425, 542426, 542427, 542428, 542429, 542430, 542431, 542500, 542521, 542522, 542523, 542524, 542525, 542526, 542527, 610000, 610100, 610101, 610102, 610103, 610104, 610111, 610112, 610113, 610114, 610115, 610116, 610117, 610122, 610124, 610125, 610200, 610201, 610202, 610203, 610204, 610222, 610300, 610301, 610302, 610303, 610304, 610322, 610323, 610324, 610326, 610327, 610328, 610329, 610330, 610331, 610400, 610401, 610402, 610403, 610404, 610422, 610423, 610424, 610425, 610426, 610427, 610428, 610429, 610430, 610431, 610481, 610500, 610501, 610502, 610521, 610522, 610523, 610524, 610525, 610526, 610527, 610528, 610581, 610582, 610600, 610601, 610602, 610621, 610622, 610623, 610624, 610625, 610626, 610627, 610628, 610629, 610630, 610631, 610632, 610700, 610701, 610702, 610721, 610722, 610723, 610724, 610725, 610726, 610727, 610728, 610729, 610730, 610800, 610801, 610802, 610821, 610822, 610823, 610824, 610825, 610826, 610827, 610828, 610829, 610830, 610831, 610900, 610901, 610902, 610921, 610922, 610923, 610924, 610925, 610926, 610927, 610928, 610929, 611000, 611001, 611002, 611021, 611022, 611023, 611024, 611025, 611026, 620000, 620100, 620101, 620102, 620103, 620104, 620105, 620111, 620121, 620122, 620123, 620200, 620201, 620300, 620301, 620302, 620321, 620400, 620401, 620402, 620403, 620421, 620422, 620423, 620500, 620501, 620502, 620503, 620521, 620522, 620523, 620524, 620525, 620600, 620601, 620602, 620621, 620622, 620623, 620700, 620701, 620702, 620721, 620722, 620723, 620724, 620725, 620800, 620801, 620802, 620821, 620822, 620823, 620824, 620825, 620826, 620900, 620901, 620902, 620921, 620922, 620923, 620924, 620981, 620982, 621000, 621001, 621002, 621021, 621022, 621023, 621024, 621025, 621026, 621027, 621100, 621101, 621102, 621121, 621122, 621123, 621124, 621125, 621126, 621200, 621201, 621202, 621221, 621222, 621223, 621224, 621225, 621226, 621227, 621228, 622900, 622901, 622921, 622922, 622923, 622924, 622925, 622926, 622927, 623000, 623001, 623021, 623022, 623023, 623024, 623025, 623026, 623027, 630000, 630100, 630101, 630102, 630103, 630104, 630105, 630121, 630122, 630123, 630200, 630202, 630203, 630222, 630223, 630224, 630225, 632200, 632221, 632222, 632223, 632224, 632300, 632321, 632322, 632323, 632324, 632500, 632521, 632522, 632523, 632524, 632525, 632600, 632621, 632622, 632623, 632624, 632625, 632626, 632700, 632701, 632722, 632723, 632724, 632725, 632726, 632800, 632801, 632802, 632821, 632822, 632823, 640000, 640100, 640101, 640104, 640105, 640106, 640121, 640122, 640181, 640200, 640201, 640202, 640205, 640221, 640300, 640301, 640302, 640303, 640323, 640324, 640381, 640400, 640401, 640402, 640422, 640423, 640424, 640425, 640500, 640501, 640502, 640521, 640522, 650000, 650100, 650101, 650102, 650103, 650104, 650105, 650106, 650107, 650109, 650121, 650200, 650201, 650202, 650203, 650204, 650205, 650400, 650402, 650421, 650422, 652200, 652201, 652222, 652223, 652300, 652301, 652302, 652323, 652324, 652325, 652327, 652328, 652700, 652701, 652702, 652722, 652723, 652800, 652801, 652822, 652823, 652824, 652825, 652826, 652827, 652828, 652829, 652900, 652901, 652922, 652923, 652924, 652925, 652926, 652927, 652928, 652929, 653000, 653001, 653022, 653023, 653024, 653100, 653101, 653121, 653122, 653123, 653124, 653125, 653126, 653127, 653128, 653129, 653130, 653131, 653200, 653201, 653221, 653222, 653223, 653224, 653225, 653226, 653227, 654000, 654002, 654003, 654004, 654021, 654022, 654023, 654024, 654025, 654026, 654027, 654028, 654200, 654201, 654202, 654221, 654223, 654224, 654225, 654226, 654300, 654301, 654321, 654322, 654323, 654324, 654325, 654326, 659000, 659001, 659002, 659003, 659004, 710000, 810000, 820000];
var random = function random(start, end) {
  return Math.ceil(Math.random() * (end - start) + start);
};
var calcCityArea = function calcCityArea() {
  var len = city_code.length;
  var code = city_code[random(0, len - 1)];
  return code;
};
var calcYMD = function calcYMD() {
  // year, month, day
  var today = new Date();
  var max_y = today.getFullYear();
  var Y = random(1900, max_y) + '';
  var M = random(0, 12);
  if (M < 10) {
    M = '0' + M + '';
  }
  var D = random(0, 30);
  if (D < 10) {
    D = '0' + D + '';
  }
  var ymd = Y + M + D;
  return ymd;
};
var calcAreaPolice = function calcAreaPolice() {
  var code = random(0, 99);
  if (code < 10) {
    code = '0' + code;
  }
  return code;
};
var calcSex = function calcSex() {
  return random(0, 9);
};
var calcLastNo = function calcLastNo(str) {
  // ISO 7064:1983.MOD 11-2
  var weight_factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
  var check_code = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];
  // the last no
  var arr = str.split('');
  var len = arr.length;
  var num = 0;
  for (var i = 0; i < len; i++) {
    num = num + arr[i] * weight_factor[i];
  }
  var resisue = num % 11;
  var last_no = check_code[resisue];
  return last_no;
};
var genIdCard = function genIdCard() {
  var area = calcCityArea();
  var ymd = calcYMD();
  var police = calcAreaPolice();
  var sex = calcSex();
  var id_code_17 = '' + area + ymd + police + sex;
  var last = calcLastNo(id_code_17);
  var id_code_18 = id_code_17 + last;
  return id_code_18;
};
var checkIdCard = function checkIdCard(idcode) {
  var code = idcode + '';
  var last = idcode[17];
  var seventeen = code.substring(0, 17);
  var real_last = calcLastNo(seventeen);
  var idcard_patter = /^[1-9][0-9]{5}([1][9][0-9]{2}|[2][0][0|1][0-9])([0][1-9]|[1][0|1|2])([0][1-9]|[1|2][0-9]|[3][0|1])[0-9]{3}([0-9]|[X])$/;
  var format = idcard_patter.test(idcode);
  return last === real_last && format ? true : false; // 校验码正确
};

var idCheck = /*#__PURE__*/Object.freeze({
  __proto__: null,
  genIdCard: genIdCard,
  checkIdCard: checkIdCard
});

var DECRYPT = 0;
var ROUND = 32;
var BLOCK = 16;
var Sbox = [0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05, 0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99, 0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62, 0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6, 0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8, 0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35, 0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87, 0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e, 0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1, 0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3, 0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f, 0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51, 0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8, 0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0, 0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84, 0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48];
var CK = [0x00070e15, 0x1c232a31, 0x383f464d, 0x545b6269, 0x70777e85, 0x8c939aa1, 0xa8afb6bd, 0xc4cbd2d9, 0xe0e7eef5, 0xfc030a11, 0x181f262d, 0x343b4249, 0x50575e65, 0x6c737a81, 0x888f969d, 0xa4abb2b9, 0xc0c7ced5, 0xdce3eaf1, 0xf8ff060d, 0x141b2229, 0x30373e45, 0x4c535a61, 0x686f767d, 0x848b9299, 0xa0a7aeb5, 0xbcc3cad1, 0xd8dfe6ed, 0xf4fb0209, 0x10171e25, 0x2c333a41, 0x484f565d, 0x646b7279];

/**
 * 16 进制串转字节数组
 */
function hexToArray(str) {
  var arr = [];
  for (var i = 0, len = str.length; i < len; i += 2) {
    arr.push(parseInt(str.substr(i, 2), 16));
  }
  return arr;
}

/**
 * 字节数组转 16 进制串
 */
function ArrayToHex(arr) {
  return arr.map(function (item) {
    item = item.toString(16);
    return item.length === 1 ? '0' + item : item;
  }).join('');
}

/**
 * base64 转字节数组
 */
function base64ToArray(str) {
  return toByteArray(str);
}

/**
 * 字节数组转 base64
 */
function arrayToBase64(arr) {
  return fromByteArray(arr);
}

/**
 * utf8 串转字节数组
 */
function utf8ToArray(str) {
  var arr = [];
  for (var i = 0, len = str.length; i < len; i++) {
    var point = str.charCodeAt(i);
    if (point <= 0x007f) {
      // 单子节，标量值：00000000 00000000 0zzzzzzz
      arr.push(point);
    } else if (point <= 0x07ff) {
      // 双字节，标量值：00000000 00000yyy yyzzzzzz
      arr.push(0xc0 | point >>> 6); // 110yyyyy（0xc0-0xdf）
      arr.push(0x80 | point & 0x3f); // 10zzzzzz（0x80-0xbf）
    } else {
      // 三字节：标量值：00000000 xxxxyyyy yyzzzzzz
      arr.push(0xe0 | point >>> 12); // 1110xxxx（0xe0-0xef）
      arr.push(0x80 | point >>> 6 & 0x3f); // 10yyyyyy（0x80-0xbf）
      arr.push(0x80 | point & 0x3f); // 10zzzzzz（0x80-0xbf）
    }
  }

  return arr;
}

/**
 * 字节数组转 utf8 串
 */
function arrayToUtf8(arr) {
  var str = [];
  for (var i = 0, len = arr.length; i < len; i++) {
    if (arr[i] >= 0xe0 && arr[i] <= 0xef) {
      // 三字节
      str.push(String.fromCharCode(((arr[i] & 0x0f) << 12) + ((arr[i + 1] & 0x3f) << 6) + (arr[i + 2] & 0x3f)));
      i += 2;
    } else if (arr[i] >= 0xc0 && arr[i] <= 0xdf) {
      // 双字节
      str.push(String.fromCharCode(((arr[i] & 0x1f) << 6) + (arr[i + 1] & 0x3f)));
      i++;
    } else {
      // 单字节
      str.push(String.fromCharCode(arr[i]));
    }
  }
  return str.join('');
}

/**
 * utf8 串转16位字节数组
 */
function srtToBytes(str) {
  var arr = utf8ToArray(str); // 0x00
  if (arr.length < 16) {
    var paddingCount = 16 - arr.length;
    for (var i = 0; i < paddingCount; i++) arr.push(0x00);
  } else {
    arr = arr.slice(0, 16);
  }
  return arr;
}

/**
 * 32 比特循环左移
 */
function rotl(x, y) {
  return x << y | x >>> 32 - y;
}

/**
 * 非线性变换
 */
function byteSub(a) {
  return (Sbox[a >>> 24 & 0xff] & 0xff) << 24 | (Sbox[a >>> 16 & 0xff] & 0xff) << 16 | (Sbox[a >>> 8 & 0xff] & 0xff) << 8 | Sbox[a & 0xff] & 0xff;
}

/**
 * 线性变换，加密/解密用
 */
function l1(b) {
  return b ^ rotl(b, 2) ^ rotl(b, 10) ^ rotl(b, 18) ^ rotl(b, 24);
}

/**
 * 线性变换，生成轮密钥用
 */
function l2(b) {
  return b ^ rotl(b, 13) ^ rotl(b, 23);
}

/**
 * 以一组 128 比特进行加密/解密操作
 */
function sms4Crypt(input, output, roundKey) {
  var x = new Array(4);

  // 字节数组转成字数组（此处 1 字 = 32 比特）
  var tmp = new Array(4);
  for (var i = 0; i < 4; i++) {
    tmp[0] = input[0 + 4 * i] & 0xff;
    tmp[1] = input[1 + 4 * i] & 0xff;
    tmp[2] = input[2 + 4 * i] & 0xff;
    tmp[3] = input[3 + 4 * i] & 0xff;
    x[i] = tmp[0] << 24 | tmp[1] << 16 | tmp[2] << 8 | tmp[3];
  }

  // x[i + 4] = x[i] ^ l1(byteSub(x[i + 1] ^ x[i + 2] ^ x[i + 3] ^ roundKey[i]))
  for (var r = 0, mid; r < 32; r += 4) {
    mid = x[1] ^ x[2] ^ x[3] ^ roundKey[r + 0];
    x[0] ^= l1(byteSub(mid)); // x[4]

    mid = x[2] ^ x[3] ^ x[0] ^ roundKey[r + 1];
    x[1] ^= l1(byteSub(mid)); // x[5]

    mid = x[3] ^ x[0] ^ x[1] ^ roundKey[r + 2];
    x[2] ^= l1(byteSub(mid)); // x[6]

    mid = x[0] ^ x[1] ^ x[2] ^ roundKey[r + 3];
    x[3] ^= l1(byteSub(mid)); // x[7]
  }

  // 反序变换
  for (var j = 0; j < 16; j += 4) {
    output[j] = x[3 - j / 4] >>> 24 & 0xff;
    output[j + 1] = x[3 - j / 4] >>> 16 & 0xff;
    output[j + 2] = x[3 - j / 4] >>> 8 & 0xff;
    output[j + 3] = x[3 - j / 4] & 0xff;
  }
}

/**
 * 密钥扩展算法
 */
function sms4KeyExt(key, roundKey, cryptFlag) {
  var x = new Array(4);

  // 字节数组转成字数组（此处 1 字 = 32 比特）
  var tmp = new Array(4);
  for (var i = 0; i < 4; i++) {
    tmp[0] = key[0 + 4 * i] & 0xff;
    tmp[1] = key[1 + 4 * i] & 0xff;
    tmp[2] = key[2 + 4 * i] & 0xff;
    tmp[3] = key[3 + 4 * i] & 0xff;
    x[i] = tmp[0] << 24 | tmp[1] << 16 | tmp[2] << 8 | tmp[3];
  }

  // 与系统参数做异或
  x[0] ^= 0xa3b1bac6;
  x[1] ^= 0x56aa3350;
  x[2] ^= 0x677d9197;
  x[3] ^= 0xb27022dc;

  // roundKey[i] = x[i + 4] = x[i] ^ l2(byteSub(x[i + 1] ^ x[i + 2] ^ x[i + 3] ^ CK[i]))
  for (var r = 0, mid; r < 32; r += 4) {
    mid = x[1] ^ x[2] ^ x[3] ^ CK[r + 0];
    roundKey[r + 0] = x[0] ^= l2(byteSub(mid)); // x[4]

    mid = x[2] ^ x[3] ^ x[0] ^ CK[r + 1];
    roundKey[r + 1] = x[1] ^= l2(byteSub(mid)); // x[5]

    mid = x[3] ^ x[0] ^ x[1] ^ CK[r + 2];
    roundKey[r + 2] = x[2] ^= l2(byteSub(mid)); // x[6]

    mid = x[0] ^ x[1] ^ x[2] ^ CK[r + 3];
    roundKey[r + 3] = x[3] ^= l2(byteSub(mid)); // x[7]
  }

  // 解密时使用反序的轮密钥
  if (cryptFlag === DECRYPT) {
    for (var _r = 0, _mid; _r < 16; _r++) {
      _mid = roundKey[_r];
      roundKey[_r] = roundKey[31 - _r];
      roundKey[31 - _r] = _mid;
    }
  }
}

/**
 * 加密：参数-明文和key转为数组-明文补充
 * @param {*} inArray
 * @param {*} key
 * @param {*} cryptFlag
 * @param {*} param3
 * @param {*} base64
 */
function sm4(inArray, key, cryptFlag) {
  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
    _ref$padding = _ref.padding,
    padding = _ref$padding === void 0 ? 'pkcs#5' : _ref$padding;
    _ref.mode;
    var _ref$output = _ref.output,
    output = _ref$output === void 0 ? 'string' : _ref$output;
  var base64 = arguments.length > 4 ? arguments[4] : undefined;

  // 检查 key
  if (typeof key === 'string') key = srtToBytes(key);
  if (key.length !== 128 / 8) {
    // key 不是 128 bytes
    throw new Error('key should be a 16 bytes string');
  }

  // 检查输入
  if (typeof inArray === 'string') {
    if (cryptFlag !== DECRYPT) {
      // 加密，输入为 utf8 串
      inArray = utf8ToArray(inArray);
    } else if (base64 === 1) {
      // 解密，输入为 16 进制串
      inArray = base64ToArray(inArray);
    } else {
      inArray = hexToArray(inArray);
    }
  } else {
    inArray = _toConsumableArray(inArray);
  }

  // 新增填充
  if (padding === 'pkcs#5' && cryptFlag !== DECRYPT) {
    var paddingCount = BLOCK - inArray.length % BLOCK;
    for (var i = 0; i < paddingCount; i++) inArray.push(paddingCount);
  }

  // 生成轮密钥
  var roundKey = new Array(ROUND);
  sms4KeyExt(key, roundKey, cryptFlag);
  var outArray = [];
  var restLen = inArray.length;
  var point = 0;
  while (restLen >= BLOCK) {
    var input = inArray.slice(point, point + 16);
    var _output = new Array(16);
    sms4Crypt(input, _output, roundKey);
    for (var _i = 0; _i < BLOCK; _i++) {
      outArray[point + _i] = _output[_i];
    }
    restLen -= BLOCK;
    point += BLOCK;
  }

  // 去除填充
  if (padding === 'pkcs#5' && cryptFlag === DECRYPT) {
    var _paddingCount = outArray[outArray.length - 1];
    outArray.splice(outArray.length - _paddingCount, _paddingCount);
  }

  // 调整输出
  if (output !== 'array') {
    if (cryptFlag !== DECRYPT) {
      // 加密
      if (base64 === 1) {
        return arrayToBase64(outArray);
      } else {
        // 输出转 16 进制串
        return ArrayToHex(outArray);
      }
    } else {
      // 解密，输出转 utf8 串
      return arrayToUtf8(outArray);
    }
  } else {
    return outArray;
  }
}
var encrypt = function encrypt(inArray, key, options) {
  return sm4(inArray, key, 1, options);
};
var decrypt = function decrypt(inArray, key, options) {
  return sm4(inArray, key, 0, options);
};

var KEY = '20220923huisdk344444';
var huiLogger = createLogger$1();
var LogLevel = /*#__PURE__*/function (_SuperClassLogLevel) {
  _inherits(LogLevel, _SuperClassLogLevel);
  var _super = _createSuper(LogLevel);
  function LogLevel() {
    var _this;
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, LogLevel);
    _this = _super.call(this);
    // 默认埋点级别为 info
    // 表名，在需要新建表时动态生成
    _this.sheetname = null;
    // 是否通过 console 打印
    _this.enableConsole = true;
    // 是否开启 indexdb 日志存储功能
    _this.enableLogIndexDB = data.enableLogIndexDB === true ? true : false;
    // 是否在 ucf 客户端
    _this.isUcf = isUcf();
    // 最大有效表数量
    _this.maxSheetCount = data.maxSheetCount || 15;
    // 单表最多插入数据条数
    _this.maxSheetItemCount = data.maxSheetItemCount || 50000;
    // 本地日志过期时间，以天为单位
    _this.expiredDays = data.expiredDays || 7;
    // 本地日志内容是否加密
    _this.encryption = data.encryption === false ? false : true;
    _this._indexdb = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
    if (!_this.isUcf && !_this._indexdb) {
      huiLogger.debug('当前浏览器不支持 indexedDB,日志采集功能暂停使用。');
    }
    _this._init();
    return _this;
  }
  _createClass(LogLevel, [{
    key: "_init",
    value: function () {
      var _init2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
        var _this2 = this;
        var levels;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (this.isUcf) {
                levels = ['error', 'warn', 'info', 'debug']; // ucf 环境初始化
                usdk.logger.createLogger('user');
                levels[usdk.logger.getLogLevel()] && (this.level = levels[usdk.logger.getLogLevel()]);
              }
              // 定义埋点方法 debug, info, warn, error
              this.levels.forEach(function (level, index) {
                var logMethod = console[level];
                Object.assign(_this2, _defineProperty({}, level, function () {
                  var _this3 = this;
                  var currentLevelIndex = this.levels.findIndex(function (item) {
                    return item === _this3.level;
                  });
                  if (currentLevelIndex > index) {
                    return;
                  }
                  for (var _len = arguments.length, content = new Array(_len), _key = 0; _key < _len; _key++) {
                    content[_key] = arguments[_key];
                  }
                  if (this.isUcf) {
                    // ucf 处理逻辑 usdk logDebug logError logInfo logWarn
                    var keysUcf = {
                      debug: 'logDebug',
                      info: 'logInfo',
                      warn: 'logWarn',
                      error: 'logError'
                    };
                    // 处理日志埋点参数转为字符串，格式化
                    var contentStr = this.handleContent(content, level);
                    usdk.logger[keysUcf[level]]('user', contentStr, dateFormat(new Date(), 'yyyy-MM-dd HH:mm:ss.S'));
                    return;
                  }

                  // 如果设置 console 的方法
                  var userAgent = window.navigator.userAgent.toLowerCase();
                  var isIE = userAgent.match(/msie/) != null || userAgent.match(/trident/) != null;
                  if (!isIE && this.enableConsole) {
                    logMethod.apply(this, this._handleContent(level, content));
                  }

                  // 如果开启日志存储并且支持 indexDB 并且在当前实例的日志级别记录范围
                  if (this.enableLogIndexDB && this._indexdb) {
                    // 处理日志埋点参数转为字符串，格式化
                    var _contentStr = this.handleContent(content, level);
                    this.track(_contentStr);
                  }
                }));
              });

              // 如果关闭日志采集或者在客户端下不走下边操作表逻辑
              if (!(!this._indexdb || this.isUcf)) {
                _context.next = 4;
                break;
              }
              return _context.abrupt("return");
            case 4:
              _context.prev = 4;
              // 连接数据库,需要新建表时在更新数据库
              this.deleteIDBDatabasePromise = this.deleteIndexdbStore();
              _context.t0 = this.deleteIDBDatabasePromise;
              if (!_context.t0) {
                _context.next = 10;
                break;
              }
              _context.next = 10;
              return this.deleteIDBDatabasePromise;
            case 10:
              this.createDatabaseTablePromise = this.createDatabaseTable('HUI-ET-BASE-INFO');
              _context.t1 = this.createDatabaseTablePromise;
              if (!_context.t1) {
                _context.next = 15;
                break;
              }
              _context.next = 15;
              return this.createDatabaseTablePromise;
            case 15:
              _context.next = 20;
              break;
            case 17:
              _context.prev = 17;
              _context.t2 = _context["catch"](4);
              huiLogger.debug('@hsui/tracker 初始化失败', _context.t2);
            case 20:
            case "end":
              return _context.stop();
          }
        }, _callee, this, [[4, 17]]);
      }));
      function _init() {
        return _init2.apply(this, arguments);
      }
      return _init;
    }() // 修改日志采集类配置项, 因为操作表架构是在初始化时执行，此时修改配置也不会再次更新表结构，所以不能在这里配置 maxSheetCount、expiredDays
  }, {
    key: "setConfig",
    value: function () {
      var _setConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
        var _this4 = this;
        var data,
          configKeys,
          dataKeys,
          _args2 = arguments;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              data = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};
              configKeys = ['maxSheetItemCount', 'enableConsole', 'enableLogIndexDB'];
              dataKeys = Object.keys(data);
              dataKeys.map(function (key) {
                configKeys.includes(key) && (_this4[key] = data[key]);
              });
            case 4:
            case "end":
              return _context2.stop();
          }
        }, _callee2);
      }));
      function setConfig() {
        return _setConfig.apply(this, arguments);
      }
      return setConfig;
    }() // 新建表
  }, {
    key: "createDatabaseTable",
    value: function createDatabaseTable(sheetname) {
      var _this5 = this;
      return new Promise( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(resolve, reject) {
          var version, openIDBDatabase;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.t0 = _this5.deleteIDBDatabasePromise;
                if (!_context3.t0) {
                  _context3.next = 5;
                  break;
                }
                _context3.next = 5;
                return _this5.deleteIDBDatabasePromise;
              case 5:
                _context3.next = 7;
                return _this5.getDatabaseVersion();
              case 7:
                _context3.t1 = _context3.sent;
                version = _context3.t1 + 1;
                // 更新数据库
                openIDBDatabase = _this5._indexdb.open('HuiTracker', version); // 如果指定的版本号，大于数据库的实际版本号，就会发生数据库升级事件 upgradeneeded
                openIDBDatabase.onupgradeneeded = function (event) {
                  huiLogger.debug('更新 indexdb 数据库');
                  var IDBDatabase = event.target.result;
                  // 判断表是否存在
                  if (!IDBDatabase.objectStoreNames.contains(sheetname)) {
                    var IDBObjectStore = IDBDatabase.createObjectStore(sheetname, {
                      keyPath: 'id'
                    });
                    // 创建表之后创建索引，索引必须先创建再使用
                    IDBObjectStore.createIndex(sheetname, 'timestamp', {
                      unique: false
                    });
                  }
                };
                openIDBDatabase.onsuccess = function (event) {
                  var IDBDatabase = event.target.result;
                  IDBDatabase.close();
                  huiLogger.debug('打开 indexdb 数据库成功');
                  resolve(true);
                };
                openIDBDatabase.onerror = function (error) {
                  huiLogger.debug('打开 indexdb 数据库时出错', error);
                  _this5.sheetname = '';
                  reject(false);
                };
                _context3.next = 19;
                break;
              case 15:
                _context3.prev = 15;
                _context3.t2 = _context3["catch"](0);
                huiLogger.debug('新建 indexdb 表时出错');
                reject(false);
              case 19:
              case "end":
                return _context3.stop();
            }
          }, _callee3, null, [[0, 15]]);
        }));
        return function (_x, _x2) {
          return _ref.apply(this, arguments);
        };
      }());
    }

    // userId 在外框登录后存在一个基础信息表， 每次去表里取值
  }, {
    key: "track",
    value: function () {
      var _track = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
        var _this6 = this;
        var content,
          userInfo,
          openIDBDatabase,
          _args6 = arguments;
        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              content = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : '';
              _context6.prev = 1;
              _context6.t0 = this.deleteIDBDatabasePromise;
              if (!_context6.t0) {
                _context6.next = 6;
                break;
              }
              _context6.next = 6;
              return this.deleteIDBDatabasePromise;
            case 6:
              _context6.t1 = this.createDatabaseTablePromise;
              if (!_context6.t1) {
                _context6.next = 10;
                break;
              }
              _context6.next = 10;
              return this.createDatabaseTablePromise;
            case 10:
              _context6.t2 = this.getItemByIdPromise;
              if (!_context6.t2) {
                _context6.next = 14;
                break;
              }
              _context6.next = 14;
              return this.getItemByIdPromise;
            case 14:
              // 获取用户信息表里用户数据
              this.getItemByIdPromise = this.getItemById('HUI-ET-BASE-INFO', 'userinfo');
              _context6.t3 = this.getItemByIdPromise;
              if (!_context6.t3) {
                _context6.next = 20;
                break;
              }
              _context6.next = 19;
              return this.getItemByIdPromise;
            case 19:
              _context6.t3 = _context6.sent;
            case 20:
              userInfo = _context6.t3;
              this.userId = userInfo && userInfo.userId ? userInfo.userId : '';
              openIDBDatabase = this._indexdb.open('HuiTracker');
              openIDBDatabase.onsuccess = /*#__PURE__*/function () {
                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(event) {
                  var IDBDatabase, sheetStoreNames, currentSheetname, nowSheetname, indexdbsheet, indexdbsheetCount;
                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                    while (1) switch (_context5.prev = _context5.next) {
                      case 0:
                        huiLogger.debug('打开 indexdb 数据库成功');
                        IDBDatabase = event.target.result; // 如果没有设置 this.sheetname 判断 DBDatabase.objectStoreNames 是否含有当天表，如果没有创建当天 1 表，如果有找当天序号最大子表设置为 this.sheetname，
                        // 如果设置了 this.sheetname 按照 this.sheetname 创建新表
                        sheetStoreNames = filterLogTable(_toConsumableArray(IDBDatabase.objectStoreNames));
                        sheetStoreNames.forEach(function (item) {
                          var splitSheetName = item.split('-'),
                            todayDate = dateFormat(new Date(), 'yyyyMMdd');
                          // 如果存在当天的表，获取当天最新的表名存入 currentSheetname
                          if (splitSheetName[2] === todayDate) {
                            if (!currentSheetname || currentSheetname && parseInt(item.split('-')[3]) > parseInt(currentSheetname.split('-')[3])) {
                              currentSheetname = item;
                            }
                          }
                        });

                        // 如果 currentSheetname 没有值说明不存在当天的表，需要新建当天表,如果有设为 sheetname
                        if (!currentSheetname) {
                          _context5.next = 12;
                          break;
                        }
                        // 如果有当天表直接连表操作数据
                        // 判断当前表是否超过 50000 条，超出了需要新建当天子表，然后再次走 track 逻辑
                        nowSheetname = _this6.sheetname = currentSheetname; // 请求表
                        indexdbsheet = IDBDatabase.transaction([_this6.sheetname], 'readwrite').objectStore(_this6.sheetname); // 获取当前表存储条数
                        indexdbsheetCount = indexdbsheet.count();
                        indexdbsheetCount.onsuccess = /*#__PURE__*/function () {
                          var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(event) {
                            var indexdbsheetRequest;
                            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                              while (1) switch (_context4.prev = _context4.next) {
                                case 0:
                                  if (!(event.target.result < _this6.maxSheetItemCount)) {
                                    _context4.next = 7;
                                    break;
                                  }
                                  // 添加数据
                                  indexdbsheetRequest = indexdbsheet.add({
                                    id: uuid(),
                                    // 需要传递设置的主 key ：id
                                    content: content,
                                    timestamp: new Date().getTime(),
                                    userId: _this6.userId ? _this6.userId : ''
                                  });
                                  indexdbsheetRequest.onsuccess = function (event) {
                                    huiLogger.debug('indexdb 插入数据成功');
                                    // // 处理结束需要关闭数据库链接，否则后续操作会不正常执行
                                    IDBDatabase.close();
                                  };
                                  indexdbsheetRequest.onerror = function (error) {
                                    huiLogger.debug('indexdb 插入数据时出错', error);
                                    IDBDatabase.close();
                                  };
                                  _this6.sheetname = '';
                                  _context4.next = 24;
                                  break;
                                case 7:
                                  // 新建表这里用 nowSheetname 保留埋点时的 this.sheetname, 否则多个埋点同时触发该条件时子表名序号不是连贯的
                                  _this6.sheetname = "HUI-ET-".concat(dateFormat(new Date(), 'yyyyMMdd')) + '-' + (parseInt(nowSheetname.split('-')[3]) + 1);

                                  // 调用新建表方法，在新建表之后再次调用 track
                                  _context4.prev = 8;
                                  IDBDatabase.close();
                                  // 如果当前有创建表的操作，等创建好之后在执行以下逻辑
                                  _context4.t0 = _this6.createDatabaseTablePromise;
                                  if (!_context4.t0) {
                                    _context4.next = 14;
                                    break;
                                  }
                                  _context4.next = 14;
                                  return _this6.createDatabaseTablePromise;
                                case 14:
                                  _this6.createDatabaseTablePromise = _this6.createDatabaseTable(_this6.sheetname);
                                  _context4.next = 17;
                                  return _this6.createDatabaseTablePromise;
                                case 17:
                                  _this6.track(content);
                                  _context4.next = 24;
                                  break;
                                case 20:
                                  _context4.prev = 20;
                                  _context4.t1 = _context4["catch"](8);
                                  huiLogger.debug('新建 indexdb 表报错');
                                  IDBDatabase.close();
                                case 24:
                                case "end":
                                  return _context4.stop();
                              }
                            }, _callee4, null, [[8, 20]]);
                          }));
                          return function (_x4) {
                            return _ref3.apply(this, arguments);
                          };
                        }();
                        indexdbsheetCount.onerror = function (error) {
                          huiLogger.debug('indexdb 获取表存储数量时出错', error);
                          _this6.sheetname = '';
                          IDBDatabase.close();
                        };
                        _context5.next = 28;
                        break;
                      case 12:
                        IDBDatabase.close();
                        // 如果没有当天表需要新建当天表，然后再次走 track 逻辑
                        _this6.sheetname = "HUI-ET-".concat(dateFormat(new Date(), 'yyyyMMdd'), "-1");

                        // 调用新建表方法，在新建表之后再次调用 track
                        _context5.prev = 14;
                        _context5.t0 = _this6.createDatabaseTablePromise;
                        if (!_context5.t0) {
                          _context5.next = 19;
                          break;
                        }
                        _context5.next = 19;
                        return _this6.createDatabaseTablePromise;
                      case 19:
                        _this6.createDatabaseTablePromise = _this6.createDatabaseTable(_this6.sheetname);
                        _context5.next = 22;
                        return _this6.createDatabaseTablePromise;
                      case 22:
                        _this6.track(content);
                        _context5.next = 28;
                        break;
                      case 25:
                        _context5.prev = 25;
                        _context5.t1 = _context5["catch"](14);
                        huiLogger.debug('新建 indexdb 表报错');
                      case 28:
                      case "end":
                        return _context5.stop();
                    }
                  }, _callee5, null, [[14, 25]]);
                }));
                return function (_x3) {
                  return _ref2.apply(this, arguments);
                };
              }();
              openIDBDatabase.onerror = function (error) {
                huiLogger.debug('打开 indexdb 数据库时出错', error);
                _this6.sheetname = null;
              };
              _context6.next = 32;
              break;
            case 27:
              _context6.prev = 27;
              _context6.t4 = _context6["catch"](1);
              huiLogger.debug('indexdb 埋点时出错，日志未记录', _context6.t4);
              this.sheetname = null;
              return _context6.abrupt("return");
            case 32:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this, [[1, 27]]);
      }));
      function track() {
        return _track.apply(this, arguments);
      }
      return track;
    }() // 格式化日志内容
  }, {
    key: "handleContent",
    value: function handleContent() {
      var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'info';
      var logTime = dateFormat(new Date(), 'yyyy-MM-dd HH:mm:ss.S');
      var logLevel = level.toUpperCase();
      // content 参数数组拼接为字符串
      var contentStr = content.reduce(function (total, value) {
        try {
          // 处理函数类型
          if (Object.prototype.toString.call(value) === '[object Function]') {
            return "".concat(total, " ").concat(value.toString());
          }
          // 处理对象、数组
          if (Object.prototype.toString.call(value) === '[object Object]' || Object.prototype.toString.call(value) === '[object Array]') {
            return "".concat(total, " ").concat(JSON.stringify(value));
          }
          return "".concat(total, " ").concat(value);
        } catch (err) {
          return total;
        }
      }, '');

      // ucf 客户端下不加密
      if (this.isUcf) {
        return contentStr;
      } else {
        return this.encryption ? encrypt("[".concat(logTime, "] [").concat(logLevel, "]").concat(contentStr), KEY) : "[".concat(logTime, "] [").concat(logLevel, "]").concat(contentStr);
      }
    }

    // 打开数据库读取数据
  }, {
    key: "openDatabase",
    value: function openDatabase(_ref4) {
      var onsuccess = _ref4.onsuccess,
        onerror = _ref4.onerror;
      var openIDBDatabase = this._indexdb.open('HuiTracker');
      openIDBDatabase.onsuccess = onsuccess;
      openIDBDatabase.onerror = onerror;
    }

    // 获取本地日志
  }, {
    key: "getLocalLogs",
    value: function getLocalLogs(startTime, endTime, userId) {
      var _this7 = this;
      return new Promise( /*#__PURE__*/function () {
        var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(resolve, reject) {
          var validLogs, getTablePromiseList, keyRangeValue;
          return _regeneratorRuntime().wrap(function _callee8$(_context8) {
            while (1) switch (_context8.prev = _context8.next) {
              case 0:
                _context8.prev = 0;
                _context8.t0 = _this7.deleteIDBDatabasePromise;
                if (!_context8.t0) {
                  _context8.next = 5;
                  break;
                }
                _context8.next = 5;
                return _this7.deleteIDBDatabasePromise;
              case 5:
                validLogs = [], getTablePromiseList = [];
                keyRangeValue = IDBKeyRange.bound(startTime, endTime);
                _this7.openDatabase({
                  onsuccess: function onsuccess(event) {
                    var IDBDatabase = event.target.result;
                    getTablePromiseList = filterLogTable(_toConsumableArray(IDBDatabase.objectStoreNames)).map( /*#__PURE__*/function () {
                      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(item) {
                        return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                          while (1) switch (_context7.prev = _context7.next) {
                            case 0:
                              return _context7.abrupt("return", _this7.getTableBydatetime(item, keyRangeValue, IDBDatabase));
                            case 1:
                            case "end":
                              return _context7.stop();
                          }
                        }, _callee7);
                      }));
                      return function (_x7) {
                        return _ref6.apply(this, arguments);
                      };
                    }());
                    Promise.all(getTablePromiseList).then(function (values) {
                      validLogs = values.reduce(function (target, item) {
                        return item ? target.concat(item) : target;
                      }, []);
                      validLogs.forEach(function (item) {
                        item.content = _this7.encryption ? decrypt(item.content, KEY) : item.content;
                      });
                      var filterLogsStr = _this7.filterLogs(validLogs, userId);
                      IDBDatabase.close();
                      resolve(filterLogsStr);
                    }).catch(function (err) {
                      huiLogger.error(err);
                      IDBDatabase.close();
                      reject(false);
                    });
                  },
                  onerror: function onerror(error) {
                    huiLogger.error('打开 indexdb 数据库时出错', error);
                    reject(false);
                  }
                });
                _context8.next = 14;
                break;
              case 10:
                _context8.prev = 10;
                _context8.t1 = _context8["catch"](0);
                huiLogger.error('获取本地 indexdb 日志失败');
                reject(false);
              case 14:
              case "end":
                return _context8.stop();
            }
          }, _callee8, null, [[0, 10]]);
        }));
        return function (_x5, _x6) {
          return _ref5.apply(this, arguments);
        };
      }());
    }

    // 处理收集的日志，过滤用户，拼接成字符串
  }, {
    key: "filterLogs",
    value: function filterLogs(logs, userId) {
      return logs.reduce(function (total, current) {
        if (current.userId === userId) {
          return total.concat(current.content, '\n');
        }
        return total;
      }, []);
    }

    // 插入单条记录 存储用户信息使用
  }, {
    key: "putItemById",
    value: function putItemById(sheetname, data) {
      var _this8 = this;
      return new Promise( /*#__PURE__*/function () {
        var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(resolve, reject) {
          return _regeneratorRuntime().wrap(function _callee9$(_context9) {
            while (1) switch (_context9.prev = _context9.next) {
              case 0:
                _context9.prev = 0;
                _context9.t0 = _this8.deleteIDBDatabasePromise;
                if (!_context9.t0) {
                  _context9.next = 5;
                  break;
                }
                _context9.next = 5;
                return _this8.deleteIDBDatabasePromise;
              case 5:
                _context9.t1 = _this8.createDatabaseTablePromise;
                if (!_context9.t1) {
                  _context9.next = 9;
                  break;
                }
                _context9.next = 9;
                return _this8.createDatabaseTablePromise;
              case 9:
                _this8.openDatabase({
                  onsuccess: function onsuccess(event) {
                    var IDBDatabase = event.target.result;
                    if (IDBDatabase.objectStoreNames.contains(sheetname)) {
                      var indexdbsheet = IDBDatabase.transaction([sheetname], 'readwrite').objectStore(sheetname);
                      var indexdbsheetRequest = indexdbsheet.put(data);
                      indexdbsheetRequest.onsuccess = function (event) {
                        // // 处理结束需要关闭数据库链接，否则后续操作会不正常执行
                        IDBDatabase.close();
                        resolve(true);
                      };
                      indexdbsheetRequest.onerror = function (error) {
                        IDBDatabase.close();
                        huiLogger.error('indexdb 插入单条记录时出错', error);
                        reject(false);
                      };
                    } else {
                      IDBDatabase.close();
                      reject(false);
                    }
                  },
                  onerror: function onerror(error) {
                    huiLogger.error('打开 indexdb 数据库时出错', error);
                    reject(false);
                  }
                });
                _context9.next = 15;
                break;
              case 12:
                _context9.prev = 12;
                _context9.t2 = _context9["catch"](0);
                reject(false);
              case 15:
              case "end":
                return _context9.stop();
            }
          }, _callee9, null, [[0, 12]]);
        }));
        return function (_x8, _x9) {
          return _ref7.apply(this, arguments);
        };
      }());
    }

    // 根据 id 获取单条数据
  }, {
    key: "getItemById",
    value: function getItemById(sheetname, id) {
      var _this9 = this;
      return new Promise( /*#__PURE__*/function () {
        var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(resolve, reject) {
          return _regeneratorRuntime().wrap(function _callee10$(_context10) {
            while (1) switch (_context10.prev = _context10.next) {
              case 0:
                _context10.prev = 0;
                _context10.t0 = _this9.deleteIDBDatabasePromise;
                if (!_context10.t0) {
                  _context10.next = 5;
                  break;
                }
                _context10.next = 5;
                return _this9.deleteIDBDatabasePromise;
              case 5:
                _this9.openDatabase({
                  onsuccess: function onsuccess(event) {
                    huiLogger.debug('打开 indexdb 数据库成功');
                    var IDBDatabase = event.target.result;
                    if (IDBDatabase.objectStoreNames.contains(sheetname)) {
                      var indexdbsheet = IDBDatabase.transaction(sheetname, 'readwrite').objectStore(sheetname);
                      var request = indexdbsheet.get(id);
                      request.onsuccess = function (event) {
                        huiLogger.debug(event.target.result);
                        IDBDatabase.close();
                        resolve(event.target.result);
                      };
                      request.onerror = function (error) {
                        huiLogger.error(error);
                        IDBDatabase.close();
                        reject(false);
                      };
                    } else {
                      IDBDatabase.close();
                      resolve(false);
                    }
                  },
                  onerror: function onerror(error) {
                    huiLogger.error('打开 indexdb 数据库时出错', error);
                    reject(false);
                  }
                });
                _context10.next = 11;
                break;
              case 8:
                _context10.prev = 8;
                _context10.t1 = _context10["catch"](0);
                reject(false);
              case 11:
              case "end":
                return _context10.stop();
            }
          }, _callee10, null, [[0, 8]]);
        }));
        return function (_x10, _x11) {
          return _ref8.apply(this, arguments);
        };
      }());
    }

    // 根据时间周期获取单个表里复核范围的日志 游标
  }, {
    key: "getTableBydatetime",
    value: function getTableBydatetime(tableName, keyRangeValue, IDBDatabase) {
      return new Promise(function (resolve, reject) {
        try {
          var sheetQueryList = [];
          var indexdbsheet = IDBDatabase.transaction([tableName], 'readwrite').objectStore(tableName);
          var indexdbIndex = indexdbsheet.index(tableName);
          var indexdbCursor = indexdbIndex.openCursor(keyRangeValue);
          indexdbCursor.onsuccess = function (event) {
            var cursor = event.target.result;
            if (cursor) {
              sheetQueryList.push(cursor.value);
              cursor.continue();
            } else {
              resolve(sheetQueryList);
            }
          };
          indexdbCursor.onerror = function (error) {
            huiLogger.error(error);
            reject(false);
          };
        } catch (error) {
          huiLogger.error('获取本地日志时报错');
          reject(false);
        }
      });
    }

    // 删除过期时间的表
  }, {
    key: "deleteIndexdbStore",
    value: function deleteIndexdbStore() {
      var _this10 = this;
      return new Promise( /*#__PURE__*/function () {
        var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(resolve, reject) {
          var version, openIDBDatabase;
          return _regeneratorRuntime().wrap(function _callee11$(_context11) {
            while (1) switch (_context11.prev = _context11.next) {
              case 0:
                _context11.next = 2;
                return _this10.getDatabaseVersion();
              case 2:
                _context11.t0 = _context11.sent;
                version = _context11.t0 + 1;
                openIDBDatabase = _this10._indexdb.open('HuiTracker', version);
                openIDBDatabase.onupgradeneeded = function (event) {
                  var IDBDatabase = event.target.result;
                  var currentSheetNames = filterLogTable(_toConsumableArray(IDBDatabase.objectStoreNames));
                  var expiredDate = dateFormat(new Date(new Date().getTime() - _this10.expiredDays * 1000 * 60 * 60 * 24), 'yyyyMMdd');
                  // 筛选出过期的表和在有效期内的表
                  var classifySheetNames = currentSheetNames.reduce(function (target, item) {
                    if (parseInt(item.split('-')[2]) <= parseInt(expiredDate)) {
                      // 筛选超出过期时间的表
                      target.expiredSheetNames.push(item);
                    } else {
                      // 筛选超出有效期时间的表
                      target.validSheetNames.push(item);
                    }
                    return target;
                  }, {
                    expiredSheetNames: [],
                    validSheetNames: []
                  });
                  // 如果有效日期的表超出设置的最大表数量，筛选出有效表内最早的表
                  var validCountDifferent = classifySheetNames.validSheetNames.length - _this10.maxSheetCount,
                    deleteSheetNames = [];
                  if (validCountDifferent > 0) {
                    // 对有效日期内的表进行排序，筛选出超出最大表数量的表
                    classifySheetNames.validSheetNames = sortSheetName(classifySheetNames.validSheetNames);
                    deleteSheetNames = classifySheetNames.validSheetNames.splice(0, validCountDifferent);
                  }
                  classifySheetNames.expiredSheetNames = classifySheetNames.expiredSheetNames.concat(deleteSheetNames);
                  // 判断当前数据库是否有该表名有才做删除逻辑
                  classifySheetNames.expiredSheetNames.forEach(function (item) {
                    IDBDatabase.objectStoreNames.contains(item) && IDBDatabase.deleteObjectStore(item);
                  });
                };
                openIDBDatabase.onsuccess = function (event) {
                  var IDBDatabase = event.target.result;
                  IDBDatabase.close();
                  resolve(true);
                };
                openIDBDatabase.onerror = function (error) {
                  huiLogger.error('打开 indexdb 数据库 HuiTracker 时出错', error);
                  reject(false);
                };
              case 8:
              case "end":
                return _context11.stop();
            }
          }, _callee11);
        }));
        return function (_x12, _x13) {
          return _ref9.apply(this, arguments);
        };
      }());
    }

    // 获取数据库版本号
  }, {
    key: "getDatabaseVersion",
    value: function getDatabaseVersion() {
      var _this11 = this;
      return new Promise(function (resolve, reject) {
        var openIDBDatabase = _this11._indexdb.open('HuiTracker');
        openIDBDatabase.onsuccess = function (event) {
          var IDBDatabase = event.target.result;
          var version = IDBDatabase.version;
          IDBDatabase.close();
          resolve(version);
        };
        openIDBDatabase.onerror = function (error) {
          huiLogger.error('打开 indexdb 数据库 HuiTracker 时出错', error);
          reject(error);
        };
      });
    }
  }]);
  return LogLevel;
}(SuperClassLogLevel);

/**
 * 日期格式化
 * date: 日期对象
 * format：时间格式
 * 引用 dateFormat(new Date("2016-05-05 12:23:26"),"yyyy-MM-dd HH:mm:ss")
 */
function dateFormat(date, format) {
  var o = {
    'M+': date.getMonth() + 1,
    //月份
    'd+': date.getDate(),
    //日
    'H+': date.getHours(),
    //小时
    'm+': date.getMinutes(),
    //分
    's+': date.getSeconds(),
    //秒
    'q+': Math.floor((date.getMonth() + 3) / 3),
    //季度
    S: date.getMilliseconds() //毫秒
  };

  if (/(y+)/.test(format)) {
    format = format.replace(RegExp.$1, (date.getFullYear() + '').substr(4 - RegExp.$1.length));
  }
  for (var k in o) if (new RegExp('(' + k + ')').test(format)) format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ('00' + o[k]).substr(('' + o[k]).length));
  return format;
}

/**
 * 表名排序
 * 表名集合
 */
function sortSheetName(arr) {
  // 创建一个数组对象，列出每天对应的表集合
  var dateArrayObj = arr.reduce(function (tar, item) {
    var key = parseInt(item.split('-')[2]);
    if (tar[key]) {
      tar[key].push(item);
      return tar;
    } else {
      tar[key] = [item];
      return tar;
    }
  }, {});

  // 获取对象数组的 key 集合，并根据大小排序
  var keysArr = Object.keys(dateArrayObj).sort(function (objA, objB) {
    if (objA < objB) {
      return -1;
    } else if (objA > objB) {
      return 1;
    }
  });

  // 针对每天的表进行排序，在按照日期前后拼接在一起
  var finallySheetNames = keysArr.reduce(function (tar, item) {
    dateArrayObj[item].sort(function (objA, objB) {
      if (parseInt(objA.split('-')[3]) < parseInt(objB.split('-')[3])) {
        return -1;
      } else if (parseInt(objA.split('-')[3]) > parseInt(objB.split('-')[3])) {
        return 1;
      }
    });
    return tar.concat(dateArrayObj[item]);
  }, []);
  return finallySheetNames;
}

// 过滤出存储日志埋点的表
function filterLogTable(names) {
  // 匹配以 HUI-ET- 开头接八位数字接任意字符的字符串
  var reg = /^HUI-ET-\d{8}.*/;
  return names.filter(function (item) {
    return reg.test(item);
  });
}

/**
 * simple generate uuid
 * 支持 ie10 及以上
 * 基于 uuid v4 添加 performance.now 避免重复
 */
function uuid() {
  var d = Date.now();
  if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
    d += performance.now(); //use high-precision timer if available
  }

  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = (d + Math.random() * 16) % 16 | 0;
    d = Math.floor(d / 16);
    return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
  });
}
function createLogger() {
  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return new LogLevel(data);
}

var setConfig = adapter('setConfig');
var ajax = adapter('ajax');
var ajaxCancelMap = ajaxCancelMap$1;
var storage = adapter('storage');
function adapter(api) {
  if (getPlatform() === 'ucf') {
    return ucfSdk[api];
  } else if (getPlatform() === 'web') {
    return webSdk[api];
  }
}

export { LogLevel, ajax, ajaxCancelMap, createLogger, idCheck as idCheckSdk, setConfig, storage };
